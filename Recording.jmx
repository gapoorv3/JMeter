<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">www.example.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="scheme" elementType="Argument">
            <stringProp name="Argument.name">scheme</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">www.example.com</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="jp@gc - Ultimate Thread Group (LOAD)" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-1317079922">
            <stringProp name="53">5</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="49">1</stringProp>
            <stringProp name="50">2</stringProp>
            <stringProp name="49">1</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Recording Controller" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/u/2/webchannel/events?VER=8&amp;SID=vUAY7aIOC2K3J4vzZhuDfg&amp;RID=48512&amp;AID=18&amp;zx=widlnq5yawy4&amp;t=3-480" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="count" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">count</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ofs" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ofs</stringProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="req0_data" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">req0_data</stringProp>
                    <stringProp name="Argument.value">[null,[2,null,null,null,3,true,null,null,0],null,null,null,null,[]]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">chat.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/u/2/webchannel/events?VER=8&amp;SID=vUAY7aIOC2K3J4vzZhuDfg&amp;RID=48512&amp;AID=18&amp;zx=widlnq5yawy4&amp;t=3</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/u/2/webchannel/events?VER=8&amp;SID=vUAY7aIOC2K3J4vzZhuDfg&amp;RID=48513&amp;AID=18&amp;zx=1osgx94a69op&amp;t=1-482" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="count" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">count</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ofs" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ofs</stringProp>
                    <stringProp name="Argument.value">6</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="req0_data" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">req0_data</stringProp>
                    <stringProp name="Argument.value">[null,[2,null,null,null,3,true,null,null,0],null,null,null,null,[]]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">chat.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/u/2/webchannel/events?VER=8&amp;SID=vUAY7aIOC2K3J4vzZhuDfg&amp;RID=48513&amp;AID=18&amp;zx=1osgx94a69op&amp;t=1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/join/-481" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;ContentId&quot;:&quot;7cc5af746c7babe4eb289cac8a58c99059af2622&quot;,&quot;AltCatalogId&quot;:&quot;http://2.tlu.dl.delivery.mp.microsoft.com/filestreamingservice/files/15199748-047b-4c32-876f-7500c46eab8c&quot;,&quot;PeerId&quot;:&quot;7de011032bf2a74495af28c7cdddff5b00000000&quot;,&quot;ReportedIp&quot;:&quot;10.5.50.147&quot;,&quot;SubnetMask&quot;:&quot;255.255.254.0&quot;,&quot;Ipv6&quot;:&quot;&quot;,&quot;IsBackground&quot;:&quot;1&quot;,&quot;ClientCompactVersion&quot;:&quot;10.0.18362.1316&quot;,&quot;Uploaded&quot;:&quot;0&quot;,&quot;Downloaded&quot;:&quot;114253781&quot;,&quot;DownloadedCdn&quot;:&quot;91185109&quot;,&quot;DownloadedDoinc&quot;:&quot;0&quot;,&quot;Left&quot;:&quot;0&quot;,&quot;JoinRequestEvent&quot;:&quot;3&quot;,&quot;RestrictedUpload&quot;:&quot;0&quot;,&quot;PeersWanted&quot;:&quot;50&quot;,&quot;GroupId&quot;:&quot;&quot;,&quot;Scope&quot;:&quot;2&quot;,&quot;UploadedBPS&quot;:&quot;0&quot;,&quot;DownloadedBPS&quot;:&quot;0&quot;,&quot;Profile&quot;:&quot;256&quot;,&quot;ConnAttempts&quot;:&quot;1:24;&quot;,&quot;ConnHandshakes&quot;:&quot;1:13;&quot;,&quot;ConnSpeeds&quot;:&quot;1:,,1,;&quot;,&quot;Seq&quot;:&quot;4&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">array610.prod.do.dsp.mp.microsoft.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/join/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/u/2/_/DynamiteWebUi/idv/-485" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="rt" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">rt</stringProp>
                    <stringProp name="Argument.value">r</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="f_uid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">f_uid</stringProp>
                    <stringProp name="Argument.value">109700400422718325491</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">chat.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/u/2/_/DynamiteWebUi/idv/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/gsi/button-487" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                    <stringProp name="Argument.value">standard</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="theme" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">theme</stringProp>
                    <stringProp name="Argument.value">filled_black</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="size" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">size</stringProp>
                    <stringProp name="Argument.value">medium</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="text" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">text</stringProp>
                    <stringProp name="Argument.value">continue_with</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="shape" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">shape</stringProp>
                    <stringProp name="Argument.value">pill</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="logo_alignment" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">logo_alignment</stringProp>
                    <stringProp name="Argument.value">center</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="width" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">width</stringProp>
                    <stringProp name="Argument.value">undefined</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="locale" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">locale</stringProp>
                    <stringProp name="Argument.value">undefined</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">1066472699605-l7ot0ic9bvb9l3e967fcqvn90al8ab8n.apps.googleusercontent.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="iframe_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">iframe_id</stringProp>
                    <stringProp name="Argument.value">gsi_489932_740046</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="as" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">as</stringProp>
                    <stringProp name="Argument.value">YdgvBl8dZxeKU7DTNhsTmw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">accounts.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/gsi/button</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/gsi/select-488" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">1066472699605-l7ot0ic9bvb9l3e967fcqvn90al8ab8n.apps.googleusercontent.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ux_mode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ux_mode</stringProp>
                    <stringProp name="Argument.value">popup</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ui_mode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui_mode</stringProp>
                    <stringProp name="Argument.value">card</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="as" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">as</stringProp>
                    <stringProp name="Argument.value">YdgvBl8dZxeKU7DTNhsTmw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="channel_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">channel_id</stringProp>
                    <stringProp name="Argument.value">fe2f3672f79211b341e154b3af3217185c86c59325bc9e49c84082429804f9ee</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="origin" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">origin</stringProp>
                    <stringProp name="Argument.value">${scheme}://qa.bloxmith.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">accounts.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/gsi/select</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/gsi/issue?user_id=109700400422718325491&amp;client_id=1066472699605-l7ot0ic9bvb9l3e967fcqvn90al8ab8n.apps.googleusercontent.com&amp;origin=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;select_by=btn&amp;consent_acquired=false&amp;token=AI3Frw52l41YPL80rv0zD9RpTjgK%3A1677829489154&amp;as=YdgvBl8dZxeKU7DTNhsTmw-490" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">accounts.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/gsi/issue?user_id=109700400422718325491&amp;client_id=1066472699605-l7ot0ic9bvb9l3e967fcqvn90al8ab8n.apps.googleusercontent.com&amp;origin=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;select_by=btn&amp;consent_acquired=false&amp;token=AI3Frw52l41YPL80rv0zD9RpTjgK%3A1677829489154&amp;as=YdgvBl8dZxeKU7DTNhsTmw</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/domainreliability/upload-491" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;entries&quot;:[{&quot;http_response_code&quot;:200,&quot;network_changed&quot;:false,&quot;protocol&quot;:&quot;QUIC&quot;,&quot;request_age_ms&quot;:61327,&quot;request_elapsed_ms&quot;:140,&quot;sample_rate&quot;:0.05,&quot;server_ip&quot;:&quot;142.250.193.78:443&quot;,&quot;status&quot;:&quot;ok&quot;,&quot;url&quot;:&quot;${scheme}://play.google.com/&quot;,&quot;was_proxied&quot;:false}],&quot;reporter&quot;:&quot;chrome&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/domainreliability/upload</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/log?format=json&amp;hasfast=true&amp;authuser=0-492" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[[1,null,null,null,null,null,null,null,null,null,[null,null,null,null,&quot;en&quot;]],1112,[[&quot;1677829491962&quot;,null,[],null,null,null,null,&quot;[\&quot;YdgvBl8dZxeKU7DTNhsTmw\&quot;,2,true,null,\&quot;1066472699605-l7ot0ic9bvb9l3e967fcqvn90al8ab8n.apps.googleusercontent.com\&quot;,\&quot;${scheme}://qa.bloxmith.com\&quot;,[2,2],null,null,null,null,null,null,16,1,null,1]&quot;,null,null,2,null,null,null,-19800,null,null,null,null,[],1,null,null,null,null,null,[]],[&quot;1677829492241&quot;,null,[],null,null,null,null,&quot;[\&quot;YdgvBl8dZxeKU7DTNhsTmw\&quot;,2,false,null,\&quot;1066472699605-l7ot0ic9bvb9l3e967fcqvn90al8ab8n.apps.googleusercontent.com\&quot;,\&quot;${scheme}://qa.bloxmith.com\&quot;,null,null,null,null,null,null,8,295,1,null,1]&quot;,null,null,2,null,null,null,-19800,null,null,null,null,[],2,null,null,null,null,null,[]],[&quot;1677829493634&quot;,null,[],null,null,null,null,&quot;[\&quot;YdgvBl8dZxeKU7DTNhsTmw\&quot;,8,false,null,\&quot;1066472699605-l7ot0ic9bvb9l3e967fcqvn90al8ab8n.apps.googleusercontent.com\&quot;,\&quot;${scheme}://qa.bloxmith.com\&quot;,null,null,null,null,0,[1,[483,61,96,18],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],8,1393,1,null,1]&quot;,null,null,8,null,null,null,-19800,null,null,null,null,[],3,null,null,null,null,null,[]],[&quot;1677829494130&quot;,null,[],null,null,null,null,&quot;[\&quot;YdgvBl8dZxeKU7DTNhsTmw\&quot;,4,false,false,\&quot;1066472699605-l7ot0ic9bvb9l3e967fcqvn90al8ab8n.apps.googleusercontent.com\&quot;,\&quot;${scheme}://qa.bloxmith.com\&quot;,null,7,null,null,null,null,8,1889,1,null,1]&quot;,null,null,4,null,null,null,-19800,null,null,null,null,[],4,null,null,null,null,null,[]]],&quot;1677829494131&quot;,[]]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">play.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/log?format=json&amp;hasfast=true&amp;authuser=0</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/log?hasfast=true&amp;authuser=0&amp;format=json-493" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[[1,null,null,null,null,null,null,null,null,null,[null,null,null,null,&quot;en&quot;]],1112,[[&quot;1677829491962&quot;,null,[],null,null,null,null,&quot;[\&quot;YdgvBl8dZxeKU7DTNhsTmw\&quot;,2,true,null,\&quot;1066472699605-l7ot0ic9bvb9l3e967fcqvn90al8ab8n.apps.googleusercontent.com\&quot;,\&quot;${scheme}://qa.bloxmith.com\&quot;,[2,2],null,null,null,null,null,null,16,1,null,1]&quot;,null,null,2,null,null,null,-19800,null,null,null,null,[],1,null,null,null,null,null,[]],[&quot;1677829492241&quot;,null,[],null,null,null,null,&quot;[\&quot;YdgvBl8dZxeKU7DTNhsTmw\&quot;,2,false,null,\&quot;1066472699605-l7ot0ic9bvb9l3e967fcqvn90al8ab8n.apps.googleusercontent.com\&quot;,\&quot;${scheme}://qa.bloxmith.com\&quot;,null,null,null,null,null,null,8,295,1,null,1]&quot;,null,null,2,null,null,null,-19800,null,null,null,null,[],2,null,null,null,null,null,[]],[&quot;1677829493634&quot;,null,[],null,null,null,null,&quot;[\&quot;YdgvBl8dZxeKU7DTNhsTmw\&quot;,8,false,null,\&quot;1066472699605-l7ot0ic9bvb9l3e967fcqvn90al8ab8n.apps.googleusercontent.com\&quot;,\&quot;${scheme}://qa.bloxmith.com\&quot;,null,null,null,null,0,[1,[483,61,96,18],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],8,1393,1,null,1]&quot;,null,null,8,null,null,null,-19800,null,null,null,null,[],3,null,null,null,null,null,[]],[&quot;1677829494130&quot;,null,[],null,null,null,null,&quot;[\&quot;YdgvBl8dZxeKU7DTNhsTmw\&quot;,4,false,false,\&quot;1066472699605-l7ot0ic9bvb9l3e967fcqvn90al8ab8n.apps.googleusercontent.com\&quot;,\&quot;${scheme}://qa.bloxmith.com\&quot;,null,7,null,null,null,null,8,1889,1,null,1]&quot;,null,null,4,null,null,null,-19800,null,null,null,null,[],4,null,null,null,null,null,[]]],&quot;1677829494142&quot;,[]]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">play.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/log?hasfast=true&amp;authuser=0&amp;format=json</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/preLogin/bloxmithLogin-494" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;token&quot;:&quot;eyJhbGciOiJSUzI1NiIsImtpZCI6ImQyNWY4ZGJjZjk3ZGM3ZWM0MDFmMDE3MWZiNmU2YmRhOWVkOWU3OTIiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJuYmYiOjE2Nzc4MjkxOTEsImF1ZCI6IjEwNjY0NzI2OTk2MDUtbDdvdDBpYzlidmI5bDNlOTY3ZmNxdm45MGFsOGFiOG4uYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMDk3MDA0MDA0MjI3MTgzMjU0OTEiLCJoZCI6ImlwZWMub3JnLmluIiwiZW1haWwiOiIxODAzMDMxMDIyQGlwZWMub3JnLmluIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImF6cCI6IjEwNjY0NzI2OTk2MDUtbDdvdDBpYzlidmI5bDNlOTY3ZmNxdm45MGFsOGFiOG4uYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJuYW1lIjoiQXBvb3J2IEd1cHRhIiwicGljdHVyZSI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hL0FHTm15eGJBckw3ODBJZmw2NHA3Rnl4Q0V5SkVvXzZfZlJteEhnQ3dsaEFOPXM5Ni1jIiwiZ2l2ZW5fbmFtZSI6IkFwb29ydiIsImZhbWlseV9uYW1lIjoiR3VwdGEiLCJpYXQiOjE2Nzc4Mjk0OTEsImV4cCI6MTY3NzgzMzA5MSwianRpIjoiZmJjZmRhMzkzMTQ2ODhkMDkwMWQ5MDMwYWQ2ODhiNDA3NGVhMzkzZiJ9.SzgOdHUV3Y5RTgR6o8C15R5XPnVJEPwIn5nDvXfTq-R4mugFcBXbmTjO9dhniNft2auA65cg2w6eITGuBXYwhIjmdOega7vxgxnc5AM6pNYOWMM7miw5GvpyWhRcYliaa4SXMF_OA7KS95J4mXuCHOp_mZzJEyn_89iO4YOKoFCGVOovpbSs-LSXT8zIZZji5aDvCAZ6PDgQV9Aq3hEoedX2Ev4UXeXp6Va-mo6gDr4Q7W31lmx6MPEFTpV7oY7K2zaEhTQ-jkfmfvG2PAlDJ_OLzVS7ItxAlDBNw9E3i-PLf-mzt4Hr8pnEU_4vmrszOTR5KaLg_HyRYPM9bPHJyg&quot;,&quot;aliasName&quot;:&quot;www.bloxmith.com&quot;,&quot;device&quot;:&quot;PC_BROWSER&quot;,&quot;requestIp&quot;:&quot;127.0.0.0&quot;,&quot;loginType&quot;:&quot;google&quot;,&quot;userAgent&quot;:&quot;Agent&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">cam-backend-qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/preLogin/bloxmithLogin</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/post_login/getBalance-495" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="systemUserId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">systemUserId</stringProp>
                    <stringProp name="Argument.value">1631227125742678016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">api-bx-qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/post_login/getBalance</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/_next/image-498" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="url" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">url</stringProp>
                    <stringProp name="Argument.value">${scheme}://dtz22sdwncfa9.cloudfront.net/assets/img/profile__img.png</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="w" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">w</stringProp>
                    <stringProp name="Argument.value">32</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="q" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">q</stringProp>
                    <stringProp name="Argument.value">75</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/image</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/_next/image-500" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="url" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">url</stringProp>
                    <stringProp name="Argument.value">${scheme}://dtz22sdwncfa9.cloudfront.net/assets/img/coin.png</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="w" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">w</stringProp>
                    <stringProp name="Argument.value">16</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="q" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">q</stringProp>
                    <stringProp name="Argument.value">75</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/image</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/_next/image-499" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="url" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">url</stringProp>
                    <stringProp name="Argument.value">${scheme}://dtz22sdwncfa9.cloudfront.net/assets/img/Gems.png</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="w" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">w</stringProp>
                    <stringProp name="Argument.value">16</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="q" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">q</stringProp>
                    <stringProp name="Argument.value">75</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/image</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/log?hasfast=true&amp;authuser=0&amp;format=json-497" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[[1,null,null,null,null,null,null,null,null,null,[null,null,null,null,&quot;en&quot;]],1112,[[&quot;1677829490475&quot;,null,[],null,null,null,null,&quot;[\&quot;YdgvBl8dZxeKU7DTNhsTmw\&quot;,12,false,null,\&quot;1066472699605-l7ot0ic9bvb9l3e967fcqvn90al8ab8n.apps.googleusercontent.com\&quot;,\&quot;${scheme}://qa.bloxmith.com\&quot;,[2],null,null,null,null,null,null,45,null,null,null,[2,3,2,null,4,2,1]]&quot;,null,null,12,null,null,null,-19800,null,null,null,null,[],1,null,null,null,null,null,[]],[&quot;1677829491495&quot;,null,[],null,null,null,null,&quot;[\&quot;YdgvBl8dZxeKU7DTNhsTmw\&quot;,8,false,null,\&quot;1066472699605-l7ot0ic9bvb9l3e967fcqvn90al8ab8n.apps.googleusercontent.com\&quot;,\&quot;${scheme}://qa.bloxmith.com\&quot;,[2],null,null,null,null,[11,[217,44,22,9],null,null,null,null,null,null,null,null,null,null,null,null,null,null,5],7,1068,null,null,null,[2,3,2,null,4,2,1]]&quot;,null,null,8,null,null,null,-19800,null,null,null,null,[],2,null,null,null,null,null,[]]],&quot;1677829495392&quot;,[]]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">play.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/log?hasfast=true&amp;authuser=0&amp;format=json</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/a-503" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">t</stringProp>
                    <stringProp name="Argument.value">96</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                    <stringProp name="Argument.value">ping</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="d" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">d</stringProp>
                    <stringProp name="Argument.value">N4IglgJiBcIBwCUDSBaArBlB2LA2AWiADQgDmMIApgEwAMdauALEwIwDGrTAnAGa4BDCJwBGcAMwC0rLAMq1aWYiADOMVrhxxqE7txIAHctFYBfIAAA=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="rn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">rn</stringProp>
                    <stringProp name="Argument.value">13</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="i" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">i</stringProp>
                    <stringProp name="Argument.value">1677828521</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sn</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="gc" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">gc</stringProp>
                    <stringProp name="Argument.value">e202056441c149f6adc1b83a517ae007</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="arp" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">arp</stringProp>
                    <stringProp name="Argument.value">N4Ig1g+gdiBcIG0AEAdEBGAbAZnQJgBYAGATiIFZsKSAOUvGgAQHMBbAQwEsAbAOgGMA9qzRIANKgw58xMpWp0SDNAF0QYkACtocEAC1WABygBTAO4BJAELqQnHfAPHz12wBMIAFwDOcIhrcACz8NADc4dA1tX3hgJABfW043XRoAJQBpAFpyXKyAdnzMPVsTLxj/EAAncojMQpoGcnRKzm8AeQBVABk4TyqAVxN4oA=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="tries" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tries</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="useIP" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">useIP</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="r" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">r</stringProp>
                    <stringProp name="Argument.value">1677829495477</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">eu1.clevertap-prod.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/a</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/a-505" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">t</stringProp>
                    <stringProp name="Argument.value">96</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                    <stringProp name="Argument.value">push</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="d" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">d</stringProp>
                    <stringProp name="Argument.value">N4IgLgngDgpiBcIoCcD2AzAlgGzgGiTS1wVAGMwB9VKMVAVzAXQENsBnGAXwMwBMEIABwAlANIBaAKwyJAdjkA2AFogCAc0EwATAAY9UxQBYjARjKmjATnSKWfCwCMhAZhZTTcljF265akHYEU0UFIW1XKysCKE14Uy4gA==</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="optOut" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">optOut</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="rn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">rn</stringProp>
                    <stringProp name="Argument.value">3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="i" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">i</stringProp>
                    <stringProp name="Argument.value">1677829495</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sn</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="gc" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">gc</stringProp>
                    <stringProp name="Argument.value">e202056441c149f6adc1b83a517ae007</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="arp" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">arp</stringProp>
                    <stringProp name="Argument.value">N4Ig1g+gdiBcIG0AEAdEBGAbAZnQJgBYAGATiIFZsKSAOUvGgAQHMBbAQwEsAbAOgGMA9qzRIANKgw58xMpWp0SDNAF0QYkACtocEAC1WABygBTAO4BJAELqQnHfAPHz12wBMIAFwDOcIhrcACz8NADc4dA1tX3hgJABfW043XRoAJQBpAFpyXKyAdnzMPVsTLxj/EAAncojMQpoGcnRKzm8AeQBVABk4TyqAVxN4oA=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="tries" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tries</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="useIP" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">useIP</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="r" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">r</stringProp>
                    <stringProp name="Argument.value">1677829495509</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">eu1.clevertap-prod.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/a</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/a-504" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">t</stringProp>
                    <stringProp name="Argument.value">96</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                    <stringProp name="Argument.value">push</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="d" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">d</stringProp>
                    <stringProp name="Argument.value">N4IgLgngDgpiBcIoCcD2AzAlgGzgGiTS1wVAGMwB9VKMVAVzAXQENsBnGAXwMwBMEIABwAlANIBaAKwyJAdjkA2AFogCAc0EwATAAY9UxQBYjARjKmjATnSKWfCwCMhAZhZTTcljF265akHYEU0UFIW1XKysCKE14Uy4gA==</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="optOut" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">optOut</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="rn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">rn</stringProp>
                    <stringProp name="Argument.value">2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="i" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">i</stringProp>
                    <stringProp name="Argument.value">1677829495</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sn</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="gc" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">gc</stringProp>
                    <stringProp name="Argument.value">e202056441c149f6adc1b83a517ae007</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="arp" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">arp</stringProp>
                    <stringProp name="Argument.value">N4Ig1g+gdiBcIG0AEAdEBGAbAZnQJgBYAGATiIFZsKSAOUvGgAQHMBbAQwEsAbAOgGMA9qzRIANKgw58xMpWp0SDNAF0QYkACtocEAC1WABygBTAO4BJAELqQnHfAPHz12wBMIAFwDOcIhrcACz8NADc4dA1tX3hgJABfW043XRoAJQBpAFpyXKyAdnzMPVsTLxj/EAAncojMQpoGcnRKzm8AeQBVABk4TyqAVxN4oA=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="tries" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tries</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="useIP" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">useIP</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="r" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">r</stringProp>
                    <stringProp name="Argument.value">1677829495503</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">eu1.clevertap-prod.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/a</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/a-501" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">t</stringProp>
                    <stringProp name="Argument.value">96</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                    <stringProp name="Argument.value">page</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="d" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">d</stringProp>
                    <stringProp name="Argument.value">N4IglgJiBcIBwCUDSBaArBlB2LA2AWiADQgDmMIApgEwAMdauALEwIwDGrTAnAGa4BDCJwBGcAMwC0rLAMq1aWYiADOMVrhxxqE7txIAHctFYl2RigAsALtYMroAekcBHAQDoRAGwD2ADwBbMGtLd3YfAMdlAHV8ZAB9AGEAQQBZAAUYUAB3AIMYWhJrL3YYAG0AXQBfEgFeLJAvMBEKbMoRFBUIAGsUADdWdyZ3VhAqqqAA</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="rn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">rn</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="i" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">i</stringProp>
                    <stringProp name="Argument.value">1677829495</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sn</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="gc" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">gc</stringProp>
                    <stringProp name="Argument.value">e202056441c149f6adc1b83a517ae007</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="arp" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">arp</stringProp>
                    <stringProp name="Argument.value">N4Ig1g+gdiBcIG0AEAdEBGAbAZnQJgBYAGATiIFZsKSAOUvGgAQHMBbAQwEsAbAOgGMA9qzRIANKgw58xMpWp0SDNAF0QYkACtocEAC1WABygBTAO4BJAELqQnHfAPHz12wBMIAFwDOcIhrcACz8NADc4dA1tX3hgJABfW043XRoAJQBpAFpyXKyAdnzMPVsTLxj/EAAncojMQpoGcnRKzm8AeQBVABk4TyqAVxN4oA=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="tries" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tries</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="useIP" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">useIP</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="r" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">r</stringProp>
                    <stringProp name="Argument.value">1677829495450</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">eu1.clevertap-prod.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/a</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/a-502" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">t</stringProp>
                    <stringProp name="Argument.value">96</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                    <stringProp name="Argument.value">page</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="d" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">d</stringProp>
                    <stringProp name="Argument.value">N4IglgJiBcIBwCUDSBaArBlB2LA2AWiADQgDmMIApgEwAMdauALEwIwDGrTAnAGa4BDCJwBGcAMwC0rLAMq1aWYiADOMVrhxxqE7txIAHctFYl2RigAsALtYMroAekcBHAQDoRAGwD2ADwBbMGtLd3YfAMdlAHV8ZAB9AGEAQQBZAAUYUAB3AIMYWhJrL3YYAG0AXQBfEgFeLJAvMBEKbMoRFBUIAGsUADdWdyZ3VhAqqqAA</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="rn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">rn</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="i" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">i</stringProp>
                    <stringProp name="Argument.value">1677829495</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sn</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="gc" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">gc</stringProp>
                    <stringProp name="Argument.value">e202056441c149f6adc1b83a517ae007</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="arp" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">arp</stringProp>
                    <stringProp name="Argument.value">N4Ig1g+gdiBcIG0AEAdEBGAbAZnQJgBYAGATiIFZsKSAOUvGgAQHMBbAQwEsAbAOgGMA9qzRIANKgw58xMpWp0SDNAF0QYkACtocEAC1WABygBTAO4BJAELqQnHfAPHz12wBMIAFwDOcIhrcACz8NADc4dA1tX3hgJABfW043XRoAJQBpAFpyXKyAdnzMPVsTLxj/EAAncojMQpoGcnRKzm8AeQBVABk4TyqAVxN4oA=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="tries" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tries</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="useIP" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">useIP</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="r" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">r</stringProp>
                    <stringProp name="Argument.value">1677829495463</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">eu1.clevertap-prod.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/a</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/a-506" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">t</stringProp>
                    <stringProp name="Argument.value">96</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                    <stringProp name="Argument.value">push</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="d" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">d</stringProp>
                    <stringProp name="Argument.value">N4IgLgngDgpiBcIYDcYDswgDROWAcgIYC2cihArmABYD6YA9gNbq3KEA2AlgCaFgwe2XGAAi/QglAcGAcy5p60MiFkM5HODgDOAYwBOMVmhIrqDUrSiFZWkNpi6wXBmgQgZ8tzjCF9tsCsbMwsYAFprWxAAXxxedwAOACUAaTCAVkywgHZsgDYALWFZdxgAJgAGSvS8gBZagEZdBtqATgAzPMIeZoAjBIBmQnSG7MIYCors4W0EBrzchLLB1tacKBL4BpwAdQLU2gBhAEEAWQAFKRAAd2IoBAqfDl0EAG0AXWjooAAA=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="rn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">rn</stringProp>
                    <stringProp name="Argument.value">4</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="i" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">i</stringProp>
                    <stringProp name="Argument.value">1677829495</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sn</stringProp>
                    <stringProp name="Argument.value">2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="gc" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">gc</stringProp>
                    <stringProp name="Argument.value">e202056441c149f6adc1b83a517ae007</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="arp" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">arp</stringProp>
                    <stringProp name="Argument.value">N4Ig1g+gdiBcIG0AEAdEBGAbAZnQJgBYAGATiIFZsKSAOUvGgAQHMBbAQwEsAbAOgGMA9qzRIANKgw58xMpWp0SDNAF0QYkACtocEAC1WABygBTAO4BJAELqQnHfAPHz12wBMIAFwDOcIhrcACz8NADc4dA1tX3hgJABfW043XRoAJQBpAFpyXKyAdnzMPVsTLxj/EAAncojMQpoGcnRKzm8AeQBVABk4TyqAVxN4oA=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="tries" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tries</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="useIP" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">useIP</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="r" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">r</stringProp>
                    <stringProp name="Argument.value">1677829495515</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">eu1.clevertap-prod.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/a</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/a-507" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">t</stringProp>
                    <stringProp name="Argument.value">96</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                    <stringProp name="Argument.value">push</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="d" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">d</stringProp>
                    <stringProp name="Argument.value">N4IgLgngDgpiBcIoCcD2AzAlgGzgGiTS1wVADkBDAWzkQEYA2AZjoCZWB2NgVg4BZWDDgA4ADIxAEAkgBMYAOzCZICEIxbsurXgKFiJBAKJUKOVerace/QSPEMAAgHMTOAHQBjVFUkgAsgDKAOIAtDCu2AjoFNgAzjAEgaFQAK6xABYIYMgpCf7BIbFUsVk5eUkhAO7pFGCxFFBQpbkEYABeqkF+ACoA1KLcTKIgAL4EmDKqwgBKANIh3IshHBwMAFq+TqowDAwygjJ0HqIwwgIARugAnKwwVzIywqweMOfnTDdXviXwjCtPwg+VwIUC2vxGQAAA</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="rn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">rn</stringProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="i" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">i</stringProp>
                    <stringProp name="Argument.value">1677829495</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sn</stringProp>
                    <stringProp name="Argument.value">3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="gc" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">gc</stringProp>
                    <stringProp name="Argument.value">e66d26d1c0e842bf92e9dd82cebb3929</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="arp" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">arp</stringProp>
                    <stringProp name="Argument.value">N4Ig1g+gdiBcIG0AEAdEBGAbAZnQJgBYAGATiIFZsKSAOUvGgAQHMBbAQwEsAbAOgGMA9qzRIANKgw58xMpWp0SDNAF0QYkACtocEAC1WABygBTAO4BJAELqQnHfAPHz12wBMIAFwDOcIhrcACz8NADc4dA1tX3hgJABfW043XRoAJQBpAFpyXKyAdnzMPVsTLxj/EAAncojMQpoGcnRKzm8AeQBVABk4TyqAVxN4oA=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="tries" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tries</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="useIP" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">useIP</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="r" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">r</stringProp>
                    <stringProp name="Argument.value">1677829495527</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">eu1.clevertap-prod.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/a</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/u/2/webchannel/events?VER=8&amp;SID=vUAY7aIOC2K3J4vzZhuDfg&amp;RID=48514&amp;AID=19&amp;zx=dls29msale4w&amp;t=1-508" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="count" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">count</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ofs" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ofs</stringProp>
                    <stringProp name="Argument.value">7</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="req0_data" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">req0_data</stringProp>
                    <stringProp name="Argument.value">[null,[2,null,null,null,3,true,null,null,0],null,null,null,null,[]]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">chat.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/u/2/webchannel/events?VER=8&amp;SID=vUAY7aIOC2K3J4vzZhuDfg&amp;RID=48514&amp;AID=19&amp;zx=dls29msale4w&amp;t=1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/jserrors/1/NRJS-8482e4e3e1750395f5d?a=1588700182&amp;sa=1&amp;v=1216.487a282&amp;t=Unnamed%20Transaction&amp;rst=8407455&amp;ck=0&amp;ref=${scheme}://desktop.postman.com/-484" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;sm&quot;:[{&quot;params&quot;:{&quot;name&quot;:&quot;Ajax/Events/Excluded/Agent&quot;},&quot;stats&quot;:{&quot;c&quot;:1}}],&quot;xhr&quot;:[{&quot;params&quot;:{&quot;method&quot;:&quot;POST&quot;,&quot;hostname&quot;:&quot;bam.nr-data.net&quot;,&quot;port&quot;:&quot;443&quot;,&quot;protocol&quot;:&quot;${scheme}&quot;,&quot;host&quot;:&quot;bam.nr-data.net:443&quot;,&quot;pathname&quot;:&quot;/jserrors/1/NRJS-8482e4e3e1750395f5d&quot;,&quot;status&quot;:503},&quot;metrics&quot;:{&quot;count&quot;:1,&quot;txSize&quot;:{&quot;t&quot;:383},&quot;rxSize&quot;:{&quot;t&quot;:19},&quot;duration&quot;:{&quot;t&quot;:18},&quot;cbTime&quot;:{&quot;t&quot;:0},&quot;time&quot;:{&quot;t&quot;:8347453}}}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">bam.nr-data.net</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/jserrors/1/NRJS-8482e4e3e1750395f5d?a=1588700182&amp;sa=1&amp;v=1216.487a282&amp;t=Unnamed%20Transaction&amp;rst=8407455&amp;ck=0&amp;ref=${scheme}://desktop.postman.com/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/postLogin/getAddress-509" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">nft-backend-qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/postLogin/getAddress</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/testnet/authn-510" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="l6n" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">l6n</stringProp>
                    <stringProp name="Argument.value">${scheme}://qa.bloxmith.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">fcl-discovery.onflow.org</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/testnet/authn</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/testnet/authn?discoveryType=UI-511" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;type&quot;:[&quot;authn&quot;],&quot;fclVersion&quot;:&quot;1.0.0-alpha.1&quot;,&quot;include&quot;:[],&quot;userAgent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36&quot;,&quot;clientServices&quot;:[],&quot;supportedStrategies&quot;:[],&quot;network&quot;:&quot;testnet&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">fcl-discovery.onflow.org</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/testnet/authn?discoveryType=UI</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/logo.svg-512" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">fcl-discovery.onflow.org</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/logo.svg</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authn?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com-513" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-testnet.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authn?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authn?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com-514" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;fclVersion&quot;:&quot;1.0.0-alpha.1&quot;,&quot;service&quot;:{&quot;type&quot;:&quot;authn&quot;},&quot;config&quot;:{&quot;discoveryAuthnInclude&quot;:[],&quot;services&quot;:{&quot;OpenID.scopes&quot;:&quot;email!&quot;},&quot;app&quot;:{&quot;title&quot;:&quot;Flow NFT Marketplace&quot;,&quot;icon&quot;:&quot;${scheme}://dtz22sdwncfa9.cloudfront.net/NFT-Flow-Resource/AmSulRXn_400x400.jpg&quot;},&quot;client&quot;:{&quot;fclVersion&quot;:&quot;1.0.0-alpha.1&quot;,&quot;fclLibrary&quot;:&quot;${scheme}://github.com/onflow/fcl-js&quot;,&quot;hostname&quot;:&quot;qa.bloxmith.com&quot;,&quot;extensions&quot;:[]}}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-testnet.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authn?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authn?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;authenticationId=jgHXD_0kJ-516" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authn?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;authenticationId=jgHXD_0kJ</stringProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/authn-515" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="l6n" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">l6n</stringProp>
                    <stringProp name="Argument.value">${scheme}://qa.bloxmith.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="channel" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">channel</stringProp>
                    <stringProp name="Argument.value">back</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="authenticationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">authenticationId</stringProp>
                    <stringProp name="Argument.value">jgHXD_0kJ</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="fclVersion" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">fclVersion</stringProp>
                    <stringProp name="Argument.value">1.0.0-alpha.1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/authn</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authn-517" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="l6n" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">l6n</stringProp>
                    <stringProp name="Argument.value">${scheme}://qa.bloxmith.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="l6n" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">l6n</stringProp>
                    <stringProp name="Argument.value">${scheme}://qa.bloxmith.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="authenticationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">authenticationId</stringProp>
                    <stringProp name="Argument.value">jgHXD_0kJ</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authn</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/u/2/webchannel/events?VER=8&amp;SID=vUAY7aIOC2K3J4vzZhuDfg&amp;RID=48515&amp;AID=19&amp;zx=jih1cxcmyy4f&amp;t=1-518" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="count" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">count</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ofs" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ofs</stringProp>
                    <stringProp name="Argument.value">8</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="req0_data" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">req0_data</stringProp>
                    <stringProp name="Argument.value">[null,[2,null,null,null,3,true,null,null,0],null,null,null,null,[]]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">chat.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/u/2/webchannel/events?VER=8&amp;SID=vUAY7aIOC2K3J4vzZhuDfg&amp;RID=48515&amp;AID=19&amp;zx=jih1cxcmyy4f&amp;t=1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authn?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;authenticationId=jgHXD_0kJ-522" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authn?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;authenticationId=jgHXD_0kJ</stringProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/domainreliability/upload-523" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;entries&quot;:[{&quot;http_response_code&quot;:200,&quot;network_changed&quot;:false,&quot;protocol&quot;:&quot;QUIC&quot;,&quot;request_age_ms&quot;:123686,&quot;request_elapsed_ms&quot;:62164,&quot;sample_rate&quot;:0.05,&quot;server_ip&quot;:&quot;142.250.193.74:443&quot;,&quot;status&quot;:&quot;ok&quot;,&quot;url&quot;:&quot;${scheme}://signaler-pa.clients6.google.com/&quot;,&quot;was_proxied&quot;:false}],&quot;reporter&quot;:&quot;chrome&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">beacons.gcp.gvt2.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/domainreliability/upload</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/blocto/account/getUserInfo-521" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/blocto/account/getUserInfo</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/authn-queue-519" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/authn-queue</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authn-524" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="l6n" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">l6n</stringProp>
                    <stringProp name="Argument.value">${scheme}://qa.bloxmith.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="authenticationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">authenticationId</stringProp>
                    <stringProp name="Argument.value">jgHXD_0kJ</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authn</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/isUnderMaintenance-520" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/isUnderMaintenance</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/punctual/multi-watch/channel?VER=8&amp;gsessionid=Y996nDse6T-AVfaRxvOQLC1vlBUwXKFVwmJHXk4OKRk&amp;key=AIzaSyCIMH2ks6VPAfRC2lqU_Snz1Lo76XGdnlc&amp;RID=rpc&amp;SID=tfXX89lt7ZD-NgzAZ9zkgQ&amp;AID=23&amp;CI=0&amp;TYPE=xmlhttp&amp;zx=eikksrxx9lxi&amp;t=1-525" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">signaler-pa.clients6.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/punctual/multi-watch/channel?VER=8&amp;gsessionid=Y996nDse6T-AVfaRxvOQLC1vlBUwXKFVwmJHXk4OKRk&amp;key=AIzaSyCIMH2ks6VPAfRC2lqU_Snz1Lo76XGdnlc&amp;RID=rpc&amp;SID=tfXX89lt7ZD-NgzAZ9zkgQ&amp;AID=23&amp;CI=0&amp;TYPE=xmlhttp&amp;zx=eikksrxx9lxi&amp;t=1</stringProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/blocto/account/getUserInfo-526" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/blocto/account/getUserInfo</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/punctual/multi-watch/channel-529" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="VER" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">VER</stringProp>
                    <stringProp name="Argument.value">8</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="gsessionid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">gsessionid</stringProp>
                    <stringProp name="Argument.value">Y996nDse6T-AVfaRxvOQLC1vlBUwXKFVwmJHXk4OKRk</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="key" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">key</stringProp>
                    <stringProp name="Argument.value">AIzaSyCIMH2ks6VPAfRC2lqU_Snz1Lo76XGdnlc</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="RID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">RID</stringProp>
                    <stringProp name="Argument.value">rpc</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="SID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">SID</stringProp>
                    <stringProp name="Argument.value">tfXX89lt7ZD-NgzAZ9zkgQ</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="AID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">AID</stringProp>
                    <stringProp name="Argument.value">23</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="CI" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">CI</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="TYPE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">TYPE</stringProp>
                    <stringProp name="Argument.value">xmlhttp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="zx" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">zx</stringProp>
                    <stringProp name="Argument.value">eikksrxx9lxi</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">t</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">signaler-pa.clients6.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/punctual/multi-watch/channel</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authn-530" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="l6n" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">l6n</stringProp>
                    <stringProp name="Argument.value">${scheme}://qa.bloxmith.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="authenticationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">authenticationId</stringProp>
                    <stringProp name="Argument.value">jgHXD_0kJ</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authn</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/punctual/v1/chooseServer?key=AIzaSyCIMH2ks6VPAfRC2lqU_Snz1Lo76XGdnlc-531" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[[null,null,null,[7,5],null,[[&quot;calendar&quot;],[true],[[[&quot;MTgwMzAzMTAyMkBpcGVjLm9yZy5pbg&quot;]]]]]]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">signaler-pa.clients6.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/punctual/v1/chooseServer?key=AIzaSyCIMH2ks6VPAfRC2lqU_Snz1Lo76XGdnlc</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/punctual/multi-watch/channel?VER=8&amp;gsessionid=ZYr8K9POaKwOXzFg7lX7nb9gp3OWBo8AnQfxA24Svv0&amp;key=AIzaSyCIMH2ks6VPAfRC2lqU_Snz1Lo76XGdnlc&amp;RID=74308&amp;CVER=22&amp;zx=bet6lno3zlqv&amp;t=1-532" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">signaler-pa.clients6.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/punctual/multi-watch/channel?VER=8&amp;gsessionid=ZYr8K9POaKwOXzFg7lX7nb9gp3OWBo8AnQfxA24Svv0&amp;key=AIzaSyCIMH2ks6VPAfRC2lqU_Snz1Lo76XGdnlc&amp;RID=74308&amp;CVER=22&amp;zx=bet6lno3zlqv&amp;t=1</stringProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authn-533" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="l6n" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">l6n</stringProp>
                    <stringProp name="Argument.value">${scheme}://qa.bloxmith.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="authenticationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">authenticationId</stringProp>
                    <stringProp name="Argument.value">jgHXD_0kJ</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authn</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/blocto/account/assets-527" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/blocto/account/assets</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/punctual/multi-watch/channel?VER=8&amp;gsessionid=ZYr8K9POaKwOXzFg7lX7nb9gp3OWBo8AnQfxA24Svv0&amp;key=AIzaSyCIMH2ks6VPAfRC2lqU_Snz1Lo76XGdnlc&amp;RID=74308&amp;CVER=22&amp;zx=bet6lno3zlqv&amp;t=1-534" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="count" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">count</stringProp>
                    <stringProp name="Argument.value">2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ofs" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ofs</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="req0___data__" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">req0___data__</stringProp>
                    <stringProp name="Argument.value">[[[&quot;7&quot;,[&quot;1677829508035440&quot;,null,null,[7,5],null,[[&quot;gmail&quot;],[true],[[[&quot;MTgwMzAzMTAyMkBpcGVjLm9yZy5pbg&quot;]]]],null,true,2],null,3]]]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="req1___data__" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">req1___data__</stringProp>
                    <stringProp name="Argument.value">[[[&quot;8&quot;,[&quot;1677829508035440&quot;,null,null,[7,5],null,[[&quot;calendar&quot;],[true],[[[&quot;MTgwMzAzMTAyMkBpcGVjLm9yZy5pbg&quot;]]]],null,true,2],null,3]]]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">signaler-pa.clients6.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/punctual/multi-watch/channel?VER=8&amp;gsessionid=ZYr8K9POaKwOXzFg7lX7nb9gp3OWBo8AnQfxA24Svv0&amp;key=AIzaSyCIMH2ks6VPAfRC2lqU_Snz1Lo76XGdnlc&amp;RID=74308&amp;CVER=22&amp;zx=bet6lno3zlqv&amp;t=1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/createHandshake-535" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;email&quot;:&quot;1803031022@ipec.org.in&quot;,&quot;userId&quot;:&quot;084848a3-5307-4327-aa0f-162a03b7b834&quot;,&quot;name&quot;:null,&quot;address&quot;:{&quot;flow&quot;:&quot;219c841f936a343b&quot;},&quot;domain&quot;:&quot;qa.bloxmith.com&quot;,&quot;userType&quot;:&quot;normal&quot;,&quot;metadata&quot;:{&quot;title&quot;:&quot;&quot;,&quot;image&quot;:&quot;&quot;,&quot;thumbnail&quot;:&quot;&quot;,&quot;url&quot;:&quot;${scheme}://qa.bloxmith.com/&quot;},&quot;deviceKey&quot;:&quot;a4c1d0e4852dc3be4cbffb4112cd86be4c883019efdee910e9cf2820981dfab6&quot;,&quot;signatureData&quot;:{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/createHandshake</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/punctual/multi-watch/channel?VER=8&amp;gsessionid=ZYr8K9POaKwOXzFg7lX7nb9gp3OWBo8AnQfxA24Svv0&amp;key=AIzaSyCIMH2ks6VPAfRC2lqU_Snz1Lo76XGdnlc&amp;RID=rpc&amp;SID=AeRp-Sjhq9iAGIkw6B4Jpg&amp;AID=0&amp;CI=0&amp;TYPE=xmlhttp&amp;zx=6wac8ttqv5&amp;t=1-536" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">signaler-pa.clients6.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/punctual/multi-watch/channel?VER=8&amp;gsessionid=ZYr8K9POaKwOXzFg7lX7nb9gp3OWBo8AnQfxA24Svv0&amp;key=AIzaSyCIMH2ks6VPAfRC2lqU_Snz1Lo76XGdnlc&amp;RID=rpc&amp;SID=AeRp-Sjhq9iAGIkw6B4Jpg&amp;AID=0&amp;CI=0&amp;TYPE=xmlhttp&amp;zx=6wac8ttqv5&amp;t=1</stringProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authn-537" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="l6n" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">l6n</stringProp>
                    <stringProp name="Argument.value">${scheme}://qa.bloxmith.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="authenticationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">authenticationId</stringProp>
                    <stringProp name="Argument.value">jgHXD_0kJ</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authn</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/portto/assets/main/color/flow/main.svg-539" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">raw.githubusercontent.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/portto/assets/main/color/flow/main.svg</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authn-540" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="l6n" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">l6n</stringProp>
                    <stringProp name="Argument.value">${scheme}://qa.bloxmith.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="authenticationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">authenticationId</stringProp>
                    <stringProp name="Argument.value">jgHXD_0kJ</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authn</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authn-542" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="l6n" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">l6n</stringProp>
                    <stringProp name="Argument.value">${scheme}://qa.bloxmith.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="authenticationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">authenticationId</stringProp>
                    <stringProp name="Argument.value">jgHXD_0kJ</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authn</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/u/2/webchannel/events-486" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="VER" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">VER</stringProp>
                    <stringProp name="Argument.value">8</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="RID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">RID</stringProp>
                    <stringProp name="Argument.value">rpc</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="SID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">SID</stringProp>
                    <stringProp name="Argument.value">vUAY7aIOC2K3J4vzZhuDfg</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="AID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">AID</stringProp>
                    <stringProp name="Argument.value">19</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="CI" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">CI</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="TYPE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">TYPE</stringProp>
                    <stringProp name="Argument.value">xmlhttp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="zx" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">zx</stringProp>
                    <stringProp name="Argument.value">xhtkclhmbtae</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">t</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">chat.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/u/2/webchannel/events</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authn-544" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="l6n" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">l6n</stringProp>
                    <stringProp name="Argument.value">${scheme}://qa.bloxmith.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="authenticationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">authenticationId</stringProp>
                    <stringProp name="Argument.value">jgHXD_0kJ</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authn</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authn?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;authenticationId=jgHXD_0kJ-545" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authn?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;authenticationId=jgHXD_0kJ</stringProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authn-546" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="l6n" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">l6n</stringProp>
                    <stringProp name="Argument.value">${scheme}://qa.bloxmith.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="authenticationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">authenticationId</stringProp>
                    <stringProp name="Argument.value">jgHXD_0kJ</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authn</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authn-547" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;authenticationId&quot;:&quot;jgHXD_0kJ&quot;,&quot;action&quot;:&quot;approve&quot;,&quot;data&quot;:{&quot;l6n&quot;:&quot;${scheme}://qa.bloxmith.com&quot;,&quot;addr&quot;:&quot;0x219c841f936a343b&quot;,&quot;paddr&quot;:&quot;f086a545ce3c552d&quot;,&quot;code&quot;:&quot;d1JRA027C-PsI-Geu3Hf&quot;,&quot;exp&quot;:1679039121295,&quot;email&quot;:&quot;1803031022@ipec.org.in&quot;,&quot;userId&quot;:&quot;084848a3-5307-4327-aa0f-162a03b7b834&quot;,&quot;signatureData&quot;:{},&quot;signatures&quot;:[]}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authn</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authn-548" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="l6n" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">l6n</stringProp>
                    <stringProp name="Argument.value">${scheme}://qa.bloxmith.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="authenticationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">authenticationId</stringProp>
                    <stringProp name="Argument.value">jgHXD_0kJ</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authn</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/hooks?code=d1JRA027C-PsI-Geu3Hf-549" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/hooks?code=d1JRA027C-PsI-Geu3Hf</stringProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/hooks-550" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                    <stringProp name="Argument.value">d1JRA027C-PsI-Geu3Hf</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/hooks</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/postLogin/getConsumerDetails?bloxmithToken=eyJhbGciOiJQUzI1NiIsImtpZCI6Ikl5OHcwdVhuVjhBZ0xfMkk4ZXR5ZFlCYW9zTHhPdVV1cjIyQ2JMV2JXR0EiLCJ0eXAiOiJKV1QifQ.eyJkYXRhIjoie1wiSWRcIjoxNjMxMjI3MTI1NzQyNjc4MDE2LFwiQWNjb3VudFwiOlwiMTA5NzAwNDAwNDIyNzE4MzI1NDkxXCIsXCJOaWNrbmFtZVwiOlwidGVzdGluZ3Rlc3RpblwiLFwiSWRlbnRpZmVyXCI6bnVsbCxcIlVwZGF0ZVRpbWVcIjpcIjIwMjMtMDMtMDJUMDk6Mzc6MDguMTY3NTc4WlwiLFwiQ3JlYXRlVGltZVwiOlwiMjAyMy0wMy0wMlQwOTozNzowOC4xNjc1NzhaXCJ9IiwibmJmIjoxNjc3ODI5NDkyLCJleHAiOjE2Nzg0MzQyOTEsImlhdCI6MTY3NzgyOTQ5MiwiaXNzIjoiYmxveG1pdGgiLCJhdWQiOiIxNjMxMjI3MTI1NzQyNjc4MDE2In0.RKh0DUX4QW4RSVgOMzMho-L1f4RTGkvD5EJ_tIPhGU_ZHoFoGg1meDUe2OF-QBmsaETkw7iWt0K-_CZj0_puUpsdYUzo4ci3Nz08uq_P_bJqOuP54aJ6XcUVDQAKC5nv_wBEg01zhzZiSGa7RKhyidga-XkIFcdrFlcLPesO7-zU53E01Y9TWaMhwjCS-Nglj8MTw5zWQZYtVt6arrAsr3kWPsVXhp1NOH8hhYse5gASQp1EsFMCAryPYp-kw3V4373UUG1W66e02hazvlRCgWD-bqXhvx4IecWra3VhTTISZBfxShT3oE3M3gL_sgYKpEkeRMmyS-nStaO-T6Q23Q&amp;systemConsumerId=1631227125742678016-551" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">cam-backend-qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/postLogin/getConsumerDetails?bloxmithToken=eyJhbGciOiJQUzI1NiIsImtpZCI6Ikl5OHcwdVhuVjhBZ0xfMkk4ZXR5ZFlCYW9zTHhPdVV1cjIyQ2JMV2JXR0EiLCJ0eXAiOiJKV1QifQ.eyJkYXRhIjoie1wiSWRcIjoxNjMxMjI3MTI1NzQyNjc4MDE2LFwiQWNjb3VudFwiOlwiMTA5NzAwNDAwNDIyNzE4MzI1NDkxXCIsXCJOaWNrbmFtZVwiOlwidGVzdGluZ3Rlc3RpblwiLFwiSWRlbnRpZmVyXCI6bnVsbCxcIlVwZGF0ZVRpbWVcIjpcIjIwMjMtMDMtMDJUMDk6Mzc6MDguMTY3NTc4WlwiLFwiQ3JlYXRlVGltZVwiOlwiMjAyMy0wMy0wMlQwOTozNzowOC4xNjc1NzhaXCJ9IiwibmJmIjoxNjc3ODI5NDkyLCJleHAiOjE2Nzg0MzQyOTEsImlhdCI6MTY3NzgyOTQ5MiwiaXNzIjoiYmxveG1pdGgiLCJhdWQiOiIxNjMxMjI3MTI1NzQyNjc4MDE2In0.RKh0DUX4QW4RSVgOMzMho-L1f4RTGkvD5EJ_tIPhGU_ZHoFoGg1meDUe2OF-QBmsaETkw7iWt0K-_CZj0_puUpsdYUzo4ci3Nz08uq_P_bJqOuP54aJ6XcUVDQAKC5nv_wBEg01zhzZiSGa7RKhyidga-XkIFcdrFlcLPesO7-zU53E01Y9TWaMhwjCS-Nglj8MTw5zWQZYtVt6arrAsr3kWPsVXhp1NOH8hhYse5gASQp1EsFMCAryPYp-kw3V4373UUG1W66e02hazvlRCgWD-bqXhvx4IecWra3VhTTISZBfxShT3oE3M3gL_sgYKpEkeRMmyS-nStaO-T6Q23Q&amp;systemConsumerId=1631227125742678016</stringProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/postLogin/getConsumerDetails-556" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="bloxmithToken" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">bloxmithToken</stringProp>
                    <stringProp name="Argument.value">eyJhbGciOiJQUzI1NiIsImtpZCI6Ikl5OHcwdVhuVjhBZ0xfMkk4ZXR5ZFlCYW9zTHhPdVV1cjIyQ2JMV2JXR0EiLCJ0eXAiOiJKV1QifQ.eyJkYXRhIjoie1wiSWRcIjoxNjMxMjI3MTI1NzQyNjc4MDE2LFwiQWNjb3VudFwiOlwiMTA5NzAwNDAwNDIyNzE4MzI1NDkxXCIsXCJOaWNrbmFtZVwiOlwidGVzdGluZ3Rlc3RpblwiLFwiSWRlbnRpZmVyXCI6bnVsbCxcIlVwZGF0ZVRpbWVcIjpcIjIwMjMtMDMtMDJUMDk6Mzc6MDguMTY3NTc4WlwiLFwiQ3JlYXRlVGltZVwiOlwiMjAyMy0wMy0wMlQwOTozNzowOC4xNjc1NzhaXCJ9IiwibmJmIjoxNjc3ODI5NDkyLCJleHAiOjE2Nzg0MzQyOTEsImlhdCI6MTY3NzgyOTQ5MiwiaXNzIjoiYmxveG1pdGgiLCJhdWQiOiIxNjMxMjI3MTI1NzQyNjc4MDE2In0.RKh0DUX4QW4RSVgOMzMho-L1f4RTGkvD5EJ_tIPhGU_ZHoFoGg1meDUe2OF-QBmsaETkw7iWt0K-_CZj0_puUpsdYUzo4ci3Nz08uq_P_bJqOuP54aJ6XcUVDQAKC5nv_wBEg01zhzZiSGa7RKhyidga-XkIFcdrFlcLPesO7-zU53E01Y9TWaMhwjCS-Nglj8MTw5zWQZYtVt6arrAsr3kWPsVXhp1NOH8hhYse5gASQp1EsFMCAryPYp-kw3V4373UUG1W66e02hazvlRCgWD-bqXhvx4IecWra3VhTTISZBfxShT3oE3M3gL_sgYKpEkeRMmyS-nStaO-T6Q23Q</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="systemConsumerId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">systemConsumerId</stringProp>
                    <stringProp name="Argument.value">1631227125742678016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">cam-backend-qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/postLogin/getConsumerDetails</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/scripts?block_height=sealed-552" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;script&quot;:&quot;CmltcG9ydCBSdW1ibGUgZnJvbSAweGE1ZTk5Nzc3OTJhZDljMTIKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCnB1YiBmdW4gbWFpbihhY2NvdW50OiBBZGRyZXNzKTogQm9vbCB7CiAgICBsZXQgVmF1bHRDaGVjayA9IGdldEFjY291bnQoYWNjb3VudCkuZ2V0Q2FwYWJpbGl0eTwmUnVtYmxlLlZhdWx0e0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KC9wdWJsaWMvUnVtYmxlUHVibGljKS5jaGVjaygpCiAgICByZXR1cm4gVmF1bHRDaGVjawp9Cg==&quot;,&quot;arguments&quot;:[&quot;eyJ0eXBlIjoiQWRkcmVzcyIsInZhbHVlIjoiMHgyMTljODQxZjkzNmEzNDNiIn0=&quot;]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">rest-testnet.onflow.org</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/v1/scripts?block_height=sealed</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/scripts?block_height=sealed-554" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;script&quot;:&quot;CiAgICAgIGltcG9ydCBSdW1ibGUgZnJvbSAweGE1ZTk5Nzc3OTJhZDljMTIKICAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKICAgICAgcHViIGZ1biBtYWluKGFjY291bnQ6IEFkZHJlc3MpOiBVRml4NjQgewogICAgICAgICAgbGV0IFJlY2lwaWVudFZhdWx0ID0gZ2V0QWNjb3VudChhY2NvdW50KS5nZXRDYXBhYmlsaXR5KC9wdWJsaWMvUnVtYmxlUHVibGljKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmJvcnJvdzwmUnVtYmxlLlZhdWx0e0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IFJlY2lwaWVudCBWYXVsdCByZWZlcmVuY2UiKQogICAgICAgICAgcmV0dXJuIFJlY2lwaWVudFZhdWx0LmJhbGFuY2UKICAgICAgfQogICAgICA=&quot;,&quot;arguments&quot;:[&quot;eyJ0eXBlIjoiQWRkcmVzcyIsInZhbHVlIjoiMHgyMTljODQxZjkzNmEzNDNiIn0=&quot;]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">rest-testnet.onflow.org</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/v1/scripts?block_height=sealed</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/scripts?block_height=sealed-553" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;script&quot;:&quot;CmltcG9ydCBQcm9qZWN0UiBmcm9tIDB4Zjk1MTcwN2E0YmM4NWNlNAppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKcHViIGZ1biBtYWluKGFjY291bnQ6IEFkZHJlc3MpOiBCb29sIHsKCiAgICBsZXQgQ29sbGVjdGlvbkNoZWNrID0gZ2V0QWNjb3VudChhY2NvdW50KS5nZXRDYXBhYmlsaXR5PCZQcm9qZWN0Ui5Db2xsZWN0aW9ue05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KC9wdWJsaWMvUHJvamVjdFJDb2xsZWN0aW9uKS5jaGVjaygpCiAgICByZXR1cm4gQ29sbGVjdGlvbkNoZWNrCn0K&quot;,&quot;arguments&quot;:[&quot;eyJ0eXBlIjoiQWRkcmVzcyIsInZhbHVlIjoiMHgyMTljODQxZjkzNmEzNDNiIn0=&quot;]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">rest-testnet.onflow.org</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/v1/scripts?block_height=sealed</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/scripts?block_height=sealed-555" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;script&quot;:&quot;CiAgICAgIGltcG9ydCBSdW1ibGUgZnJvbSAweGE1ZTk5Nzc3OTJhZDljMTIKICAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKICAgICAgcHViIGZ1biBtYWluKGFjY291bnQ6IEFkZHJlc3MpOiBVRml4NjQgewogICAgICAgICAgbGV0IFJlY2lwaWVudFZhdWx0ID0gZ2V0QWNjb3VudChhY2NvdW50KS5nZXRDYXBhYmlsaXR5KC9wdWJsaWMvUnVtYmxlUHVibGljKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmJvcnJvdzwmUnVtYmxlLlZhdWx0e0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IFJlY2lwaWVudCBWYXVsdCByZWZlcmVuY2UiKQogICAgICAgICAgcmV0dXJuIFJlY2lwaWVudFZhdWx0LmJhbGFuY2UKICAgICAgfQogICAgICA=&quot;,&quot;arguments&quot;:[&quot;eyJ0eXBlIjoiQWRkcmVzcyIsInZhbHVlIjoiMHgyMTljODQxZjkzNmEzNDNiIn0=&quot;]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">rest-testnet.onflow.org</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/v1/scripts?block_height=sealed</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/u/2/_/DynamiteWebUi/idv/-557" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="rt" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">rt</stringProp>
                    <stringProp name="Argument.value">r</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="f_uid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">f_uid</stringProp>
                    <stringProp name="Argument.value">109700400422718325491</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">chat.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/u/2/_/DynamiteWebUi/idv/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/scripts?block_height=sealed-558" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;script&quot;:&quot;CiAgICAgIGltcG9ydCBSdW1ibGUgZnJvbSAweGE1ZTk5Nzc3OTJhZDljMTIKICAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKICAgICAgcHViIGZ1biBtYWluKGFjY291bnQ6IEFkZHJlc3MpOiBVRml4NjQgewogICAgICAgICAgbGV0IFJlY2lwaWVudFZhdWx0ID0gZ2V0QWNjb3VudChhY2NvdW50KS5nZXRDYXBhYmlsaXR5KC9wdWJsaWMvUnVtYmxlUHVibGljKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmJvcnJvdzwmUnVtYmxlLlZhdWx0e0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IFJlY2lwaWVudCBWYXVsdCByZWZlcmVuY2UiKQogICAgICAgICAgcmV0dXJuIFJlY2lwaWVudFZhdWx0LmJhbGFuY2UKICAgICAgfQogICAgICA=&quot;,&quot;arguments&quot;:[&quot;eyJ0eXBlIjoiQWRkcmVzcyIsInZhbHVlIjoiMHgyMTljODQxZjkzNmEzNDNiIn0=&quot;]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">rest-testnet.onflow.org</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/v1/scripts?block_height=sealed</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/a-559" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">t</stringProp>
                    <stringProp name="Argument.value">96</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                    <stringProp name="Argument.value">push</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="d" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">d</stringProp>
                    <stringProp name="Argument.value">N4IgLgngDgpiBcIYDcYDswgDROWAcgIYC2ciaAZmAPoCOArgJYDGA1tQM4wA2MzmOFGAAihMIQSgA7oW68aAI1mE0zMiADMAVgAMAJgB0O4yePYQHZgCcY6amhLqAFgHtS1KIQDmcHF36MLmgIIPgwUgAE+ABiACoRADKMHGCMaF7m4lY+NJ4+IQCyEBEAwi5yfOIKvBzmlJiIujoAjAAsIAC+OIwAJiEAHABKANIAtFoTowDsUwBsAFrmGYgwevo6WrOtrc3MbQCcFLOEPXsK/RqEWs1ThDDGU+a18M2zM/16F/v7OFDLzTgAOrzEbUEoAQQKAAVJCApMQoAgdDgwNxmAgANoAXQ6HSAA==</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="rn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">rn</stringProp>
                    <stringProp name="Argument.value">6</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="i" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">i</stringProp>
                    <stringProp name="Argument.value">1677829529</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sn</stringProp>
                    <stringProp name="Argument.value">4</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="gc" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">gc</stringProp>
                    <stringProp name="Argument.value">e202056441c149f6adc1b83a517ae007</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="arp" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">arp</stringProp>
                    <stringProp name="Argument.value">N4Ig1g+gdiBcIG0AEAdEBGAbAZnQJgBYAGATiIFZsKSAOUvGgAQHMBbAQwEsAbAOgGMA9qzRIANKgw58xMpWp0SDURLRZcePAHZ85LQTyYtdLCsnr823fsPGiWFhx4DhaALogxIAFbQ4IAE1WAAdOAFMAd0EAXk8QTj94AC1WEnCIgNivABMIABcAZzgiHIALYq8ANzh0L18i+GAkAF84zmz/GgAlAGkAWnJBvq0tTCS4sPyGkpAAJymao2M8EgISbC9OAoB5AFUAGTg82YBXMOagAA=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="tries" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tries</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="useIP" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">useIP</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="r" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">r</stringProp>
                    <stringProp name="Argument.value">1677829529238</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">eu1.clevertap-prod.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/a</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/preLogin/public-nfts/nft?inventoryId=14&amp;lang=en&amp;nftId=6640-561" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">nft-backend-qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/preLogin/public-nfts/nft?inventoryId=14&amp;lang=en&amp;nftId=6640</stringProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/preLogin/public-nfts/nft-562" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="inventoryId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">inventoryId</stringProp>
                    <stringProp name="Argument.value">14</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="lang" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">lang</stringProp>
                    <stringProp name="Argument.value">en</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="nftId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">nftId</stringProp>
                    <stringProp name="Argument.value">6640</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">nft-backend-qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/preLogin/public-nfts/nft</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/_next/image-564" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="url" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">url</stringProp>
                    <stringProp name="Argument.value">${scheme}://bafybeib366nsdoqc7nw3obdphs63xesxenpv5bh4hnnhoaswclzcvek6ny.ipfs.w3s.link/AI/Knut/Image/KnutImage0100.png</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="w" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">w</stringProp>
                    <stringProp name="Argument.value">1080</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="q" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">q</stringProp>
                    <stringProp name="Argument.value">75</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/image</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/u/2/webchannel/events?VER=8&amp;SID=vUAY7aIOC2K3J4vzZhuDfg&amp;RID=48516&amp;AID=21&amp;zx=ehfvitdymsix&amp;t=1-563" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="count" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">count</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ofs" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ofs</stringProp>
                    <stringProp name="Argument.value">9</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="req0_data" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">req0_data</stringProp>
                    <stringProp name="Argument.value">[null,[2,null,null,null,3,true,null,null,0],null,null,null,null,[]]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">chat.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/u/2/webchannel/events?VER=8&amp;SID=vUAY7aIOC2K3J4vzZhuDfg&amp;RID=48516&amp;AID=21&amp;zx=ehfvitdymsix&amp;t=1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/postLogin/debitTokenInitiate-566" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">nft-backend-qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/postLogin/debitTokenInitiate</stringProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/a-565" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">t</stringProp>
                    <stringProp name="Argument.value">96</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                    <stringProp name="Argument.value">push</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="d" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">d</stringProp>
                    <stringProp name="Argument.value">N4IgLgngDgpiBcIYDcYDswgDROWAcgIYC2ciaAZmAPpQCuATgMYAWhAzjNQJZrdjdCYGABNsuMABEhhBKADuhADZKYNAEbLCaJmRABmAKwAGAEzjKYAJJjEJ4wEYALOPZMGMdNTQk9AeigGAHsROiYwPwBtbhEAXSjLK0lY1xhw7iC0BBB8ADEAFQACSTVCbiVxMEIGAHM1WkI67IAhJSDwoMKABSD6KBAAXxwY7IAOACUAaQBaQznpgHYFgDYALXEa7JhTM2NDZacnByZnAE4KZcIRE/VR/UJDBwXCGGNjBdcEB2Wl0dM706nHBQTbwBw4ADqqym1AAwgBBACyXTkIHkxH68GMODASiYCEisQGAyAAA</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="rn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">rn</stringProp>
                    <stringProp name="Argument.value">7</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="i" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">i</stringProp>
                    <stringProp name="Argument.value">1677829533</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sn</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="gc" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">gc</stringProp>
                    <stringProp name="Argument.value">e202056441c149f6adc1b83a517ae007</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="arp" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">arp</stringProp>
                    <stringProp name="Argument.value">N4Ig1g+gdiBcIG0AEAdEBGAbAZnQJgBYAGATiIFZsKSAOUvGgAQHMBbAQwEsAbAOgGMA9qzRIANKgw58xMpWp0SDURLRZcePAHZ85LQTyYtdLCsnr823fsPGiWFhx4DhaALogxIAFbQ4IAC1WAAcoAFMAdwBJACFPEE4/eCDQyNj4gBMIABcAZzgiLwyACwKvADc4dC9ffPhgJABfeM4M/xoAJQBpAFpyfp6tLUwA+LCcusKQACcJqqNjPBJyQy9OXIB5AFUAGThs6YBXMMagA==</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="tries" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tries</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="useIP" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">useIP</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="r" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">r</stringProp>
                    <stringProp name="Argument.value">1677829533087</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">eu1.clevertap-prod.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/a</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/postLogin/debitTokenInitiate-567" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;nftId&quot;:&quot;6640&quot;,&quot;inventoryId&quot;:&quot;14&quot;,&quot;supplyType&quot;:&quot;NFT&quot;,&quot;amount&quot;:&quot;100.0000&quot;,&quot;userWalletAddress&quot;:&quot;0x219c841f936a343b&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">nft-backend-qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/postLogin/debitTokenInitiate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/pre-authz?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;sessionId=d1JRA027C-PsI-Geu3Hf-568" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/pre-authz?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;sessionId=d1JRA027C-PsI-Geu3Hf</stringProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/pre-authz?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;sessionId=d1JRA027C-PsI-Geu3Hf-569" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;fclVersion&quot;:&quot;1.3.2&quot;,&quot;service&quot;:{&quot;params&quot;:{&quot;sessionId&quot;:&quot;d1JRA027C-PsI-Geu3Hf&quot;},&quot;type&quot;:&quot;pre-authz&quot;},&quot;config&quot;:{&quot;services&quot;:{&quot;OpenID.scopes&quot;:&quot;email!&quot;},&quot;app&quot;:{&quot;title&quot;:&quot;Flow NFT Marketplace&quot;,&quot;icon&quot;:&quot;${scheme}://dtz22sdwncfa9.cloudfront.net/NFT-Flow-Resource/AmSulRXn_400x400.jpg&quot;},&quot;client&quot;:{&quot;fclVersion&quot;:&quot;1.3.2&quot;,&quot;fclLibrary&quot;:&quot;${scheme}://github.com/onflow/fcl-js&quot;,&quot;hostname&quot;:&quot;qa.bloxmith.com&quot;}},&quot;f_type&quot;:&quot;PreSignable&quot;,&quot;f_vsn&quot;:&quot;1.0.1&quot;,&quot;roles&quot;:{&quot;proposer&quot;:true,&quot;authorizer&quot;:true,&quot;payer&quot;:true,&quot;param&quot;:false},&quot;cadence&quot;:&quot;\nimport ProjectR from 0xf951707a4bc85ce4\nimport NonFungibleToken from 0x631e88ae7f1d7c20\nimport FungibleToken from 0x9a0766d93b6608b7\nimport Rumble from 0xa5e9977792ad9c12\nimport BloxmithMarketplace from 0xf951707a4bc85ce4\n\ntransaction(account: Address, id: UInt64) {\n\n  prepare(acct: AuthAccount) {\n\n    let CollectionCheck = acct.getCapability&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;(/public/ProjectRCollection).check()\n    \n    if (!CollectionCheck) {\n        acct.save(&lt;- ProjectR.createEmptyCollection(), to: /storage/ProjectRCollection)\n        acct.link&lt;&amp;ProjectR.Collection{ProjectR.CollectionPublic, NonFungibleToken.CollectionPublic}&gt;(/public/ProjectRCollection, target: /storage/ProjectRCollection)\n        acct.link&lt;&amp;ProjectR.Collection&gt;(/private/ProjectRCollection, target: /storage/ProjectRCollection)\n        \n        let ProjectRCollection = acct.getCapability&lt;&amp;ProjectR.Collection&gt;(/private/ProjectRCollection)\n        let RumbleTokenVault = acct.getCapability&lt;&amp;Rumble.Vault{FungibleToken.Receiver}&gt;(/public/RumbleReceiver)\n        \n        acct.save(&lt;- BloxmithMarketplace.createSaleCollection(ProjectRCollection: ProjectRCollection, TokenVault: RumbleTokenVault), to: /storage/SaleCollection)\n        acct.link&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;(/public/SaleCollection, target: /storage/SaleCollection)\n\n        let saleCollection = getAccount(account).getCapability(/public/SaleCollection)\n                        .borrow&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;()\n                        ?? panic(\&quot;Could not borrow the user&apos;s SaleCollection\&quot;)\n\n        let recipientCollection = getAccount(acct.address).getCapability(/public/ProjectRCollection) \n                        .borrow&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;()\n                        ?? panic(\&quot;Can&apos;t get the User&apos;s collection.\&quot;)\n\n        let price = saleCollection.getPrice(id: UInt64(id))\n        let payment &lt;- acct.borrow&lt;&amp;Rumble.Vault&gt;(from: /storage/RumbleVault)!.withdraw(amount: price) as! @Rumble.Vault\n        saleCollection.purchase(id: UInt64(id), newOwner: acct.address, recipientCollection: recipientCollection, payment: &lt;- payment)\n\n    } else {\n\n        let saleCollection = getAccount(account).getCapability(/public/SaleCollection)\n                        .borrow&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;()\n                        ?? panic(\&quot;Could not borrow the user&apos;s SaleCollection\&quot;)\n        let recipientCollection = getAccount(acct.address).getCapability(/public/ProjectRCollection) \n                        .borrow&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;()\n                        ?? panic(\&quot;Can&apos;t get the User&apos;s collection.\&quot;)\n        let price = saleCollection.getPrice(id: UInt64(id))\n        let payment &lt;- acct.borrow&lt;&amp;Rumble.Vault&gt;(from: /storage/RumbleVault)!.withdraw(amount: price) as! @Rumble.Vault\n        saleCollection.purchase(id: UInt64(id), newOwner: acct.address, recipientCollection: recipientCollection, payment: &lt;- payment)\n  }\n}\n\n  execute {\n    log(\&quot;A user purchased an NFT\&quot;)\n  }\n}\n&quot;,&quot;args&quot;:[{&quot;type&quot;:&quot;Address&quot;,&quot;value&quot;:&quot;0xf951707a4bc85ce4&quot;},{&quot;type&quot;:&quot;UInt64&quot;,&quot;value&quot;:&quot;6640&quot;}],&quot;interaction&quot;:{&quot;tag&quot;:&quot;TRANSACTION&quot;,&quot;assigns&quot;:{},&quot;status&quot;:&quot;OK&quot;,&quot;reason&quot;:null,&quot;accounts&quot;:{&quot;CURRENT_USER&quot;:{&quot;kind&quot;:&quot;ACCOUNT&quot;,&quot;tempId&quot;:&quot;CURRENT_USER&quot;,&quot;addr&quot;:null,&quot;keyId&quot;:null,&quot;sequenceNum&quot;:null,&quot;signature&quot;:null,&quot;signingFunction&quot;:null,&quot;resolve&quot;:null,&quot;role&quot;:{&quot;proposer&quot;:true,&quot;authorizer&quot;:true,&quot;payer&quot;:true,&quot;param&quot;:false}}},&quot;params&quot;:{},&quot;arguments&quot;:{&quot;deudmrx3i8&quot;:{&quot;kind&quot;:&quot;ARGUMENT&quot;,&quot;tempId&quot;:&quot;deudmrx3i8&quot;,&quot;value&quot;:&quot;0xf951707a4bc85ce4&quot;,&quot;asArgument&quot;:{&quot;type&quot;:&quot;Address&quot;,&quot;value&quot;:&quot;0xf951707a4bc85ce4&quot;},&quot;xform&quot;:{&quot;label&quot;:&quot;Address&quot;}},&quot;rtscux2d62&quot;:{&quot;kind&quot;:&quot;ARGUMENT&quot;,&quot;tempId&quot;:&quot;rtscux2d62&quot;,&quot;value&quot;:6640,&quot;asArgument&quot;:{&quot;type&quot;:&quot;UInt64&quot;,&quot;value&quot;:&quot;6640&quot;},&quot;xform&quot;:{&quot;label&quot;:&quot;UInt64&quot;}}},&quot;message&quot;:{&quot;cadence&quot;:&quot;\nimport ProjectR from 0xf951707a4bc85ce4\nimport NonFungibleToken from 0x631e88ae7f1d7c20\nimport FungibleToken from 0x9a0766d93b6608b7\nimport Rumble from 0xa5e9977792ad9c12\nimport BloxmithMarketplace from 0xf951707a4bc85ce4\n\ntransaction(account: Address, id: UInt64) {\n\n  prepare(acct: AuthAccount) {\n\n    let CollectionCheck = acct.getCapability&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;(/public/ProjectRCollection).check()\n    \n    if (!CollectionCheck) {\n        acct.save(&lt;- ProjectR.createEmptyCollection(), to: /storage/ProjectRCollection)\n        acct.link&lt;&amp;ProjectR.Collection{ProjectR.CollectionPublic, NonFungibleToken.CollectionPublic}&gt;(/public/ProjectRCollection, target: /storage/ProjectRCollection)\n        acct.link&lt;&amp;ProjectR.Collection&gt;(/private/ProjectRCollection, target: /storage/ProjectRCollection)\n        \n        let ProjectRCollection = acct.getCapability&lt;&amp;ProjectR.Collection&gt;(/private/ProjectRCollection)\n        let RumbleTokenVault = acct.getCapability&lt;&amp;Rumble.Vault{FungibleToken.Receiver}&gt;(/public/RumbleReceiver)\n        \n        acct.save(&lt;- BloxmithMarketplace.createSaleCollection(ProjectRCollection: ProjectRCollection, TokenVault: RumbleTokenVault), to: /storage/SaleCollection)\n        acct.link&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;(/public/SaleCollection, target: /storage/SaleCollection)\n\n        let saleCollection = getAccount(account).getCapability(/public/SaleCollection)\n                        .borrow&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;()\n                        ?? panic(\&quot;Could not borrow the user&apos;s SaleCollection\&quot;)\n\n        let recipientCollection = getAccount(acct.address).getCapability(/public/ProjectRCollection) \n                        .borrow&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;()\n                        ?? panic(\&quot;Can&apos;t get the User&apos;s collection.\&quot;)\n\n        let price = saleCollection.getPrice(id: UInt64(id))\n        let payment &lt;- acct.borrow&lt;&amp;Rumble.Vault&gt;(from: /storage/RumbleVault)!.withdraw(amount: price) as! @Rumble.Vault\n        saleCollection.purchase(id: UInt64(id), newOwner: acct.address, recipientCollection: recipientCollection, payment: &lt;- payment)\n\n    } else {\n\n        let saleCollection = getAccount(account).getCapability(/public/SaleCollection)\n                        .borrow&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;()\n                        ?? panic(\&quot;Could not borrow the user&apos;s SaleCollection\&quot;)\n        let recipientCollection = getAccount(acct.address).getCapability(/public/ProjectRCollection) \n                        .borrow&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;()\n                        ?? panic(\&quot;Can&apos;t get the User&apos;s collection.\&quot;)\n        let price = saleCollection.getPrice(id: UInt64(id))\n        let payment &lt;- acct.borrow&lt;&amp;Rumble.Vault&gt;(from: /storage/RumbleVault)!.withdraw(amount: price) as! @Rumble.Vault\n        saleCollection.purchase(id: UInt64(id), newOwner: acct.address, recipientCollection: recipientCollection, payment: &lt;- payment)\n  }\n}\n\n  execute {\n    log(\&quot;A user purchased an NFT\&quot;)\n  }\n}\n&quot;,&quot;refBlock&quot;:null,&quot;computeLimit&quot;:999,&quot;proposer&quot;:null,&quot;payer&quot;:null,&quot;authorizations&quot;:[],&quot;params&quot;:[],&quot;arguments&quot;:[&quot;deudmrx3i8&quot;,&quot;rtscux2d62&quot;]},&quot;proposer&quot;:&quot;CURRENT_USER&quot;,&quot;authorizations&quot;:[&quot;CURRENT_USER&quot;],&quot;payer&quot;:[&quot;CURRENT_USER&quot;],&quot;events&quot;:{&quot;eventType&quot;:null,&quot;start&quot;:null,&quot;end&quot;:null,&quot;blockIds&quot;:[]},&quot;transaction&quot;:{&quot;id&quot;:null},&quot;block&quot;:{&quot;id&quot;:null,&quot;height&quot;:null,&quot;isSealed&quot;:null},&quot;account&quot;:{&quot;addr&quot;:null},&quot;collection&quot;:{&quot;id&quot;:null}},&quot;voucher&quot;:{&quot;cadence&quot;:&quot;\nimport ProjectR from 0xf951707a4bc85ce4\nimport NonFungibleToken from 0x631e88ae7f1d7c20\nimport FungibleToken from 0x9a0766d93b6608b7\nimport Rumble from 0xa5e9977792ad9c12\nimport BloxmithMarketplace from 0xf951707a4bc85ce4\n\ntransaction(account: Address, id: UInt64) {\n\n  prepare(acct: AuthAccount) {\n\n    let CollectionCheck = acct.getCapability&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;(/public/ProjectRCollection).check()\n    \n    if (!CollectionCheck) {\n        acct.save(&lt;- ProjectR.createEmptyCollection(), to: /storage/ProjectRCollection)\n        acct.link&lt;&amp;ProjectR.Collection{ProjectR.CollectionPublic, NonFungibleToken.CollectionPublic}&gt;(/public/ProjectRCollection, target: /storage/ProjectRCollection)\n        acct.link&lt;&amp;ProjectR.Collection&gt;(/private/ProjectRCollection, target: /storage/ProjectRCollection)\n        \n        let ProjectRCollection = acct.getCapability&lt;&amp;ProjectR.Collection&gt;(/private/ProjectRCollection)\n        let RumbleTokenVault = acct.getCapability&lt;&amp;Rumble.Vault{FungibleToken.Receiver}&gt;(/public/RumbleReceiver)\n        \n        acct.save(&lt;- BloxmithMarketplace.createSaleCollection(ProjectRCollection: ProjectRCollection, TokenVault: RumbleTokenVault), to: /storage/SaleCollection)\n        acct.link&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;(/public/SaleCollection, target: /storage/SaleCollection)\n\n        let saleCollection = getAccount(account).getCapability(/public/SaleCollection)\n                        .borrow&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;()\n                        ?? panic(\&quot;Could not borrow the user&apos;s SaleCollection\&quot;)\n\n        let recipientCollection = getAccount(acct.address).getCapability(/public/ProjectRCollection) \n                        .borrow&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;()\n                        ?? panic(\&quot;Can&apos;t get the User&apos;s collection.\&quot;)\n\n        let price = saleCollection.getPrice(id: UInt64(id))\n        let payment &lt;- acct.borrow&lt;&amp;Rumble.Vault&gt;(from: /storage/RumbleVault)!.withdraw(amount: price) as! @Rumble.Vault\n        saleCollection.purchase(id: UInt64(id), newOwner: acct.address, recipientCollection: recipientCollection, payment: &lt;- payment)\n\n    } else {\n\n        let saleCollection = getAccount(account).getCapability(/public/SaleCollection)\n                        .borrow&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;()\n                        ?? panic(\&quot;Could not borrow the user&apos;s SaleCollection\&quot;)\n        let recipientCollection = getAccount(acct.address).getCapability(/public/ProjectRCollection) \n                        .borrow&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;()\n                        ?? panic(\&quot;Can&apos;t get the User&apos;s collection.\&quot;)\n        let price = saleCollection.getPrice(id: UInt64(id))\n        let payment &lt;- acct.borrow&lt;&amp;Rumble.Vault&gt;(from: /storage/RumbleVault)!.withdraw(amount: price) as! @Rumble.Vault\n        saleCollection.purchase(id: UInt64(id), newOwner: acct.address, recipientCollection: recipientCollection, payment: &lt;- payment)\n  }\n}\n\n  execute {\n    log(\&quot;A user purchased an NFT\&quot;)\n  }\n}\n&quot;,&quot;refBlock&quot;:null,&quot;computeLimit&quot;:999,&quot;arguments&quot;:[{&quot;type&quot;:&quot;Address&quot;,&quot;value&quot;:&quot;0xf951707a4bc85ce4&quot;},{&quot;type&quot;:&quot;UInt64&quot;,&quot;value&quot;:&quot;6640&quot;}],&quot;proposalKey&quot;:{&quot;address&quot;:null,&quot;keyId&quot;:null,&quot;sequenceNum&quot;:null},&quot;payer&quot;:null,&quot;authorizers&quot;:[],&quot;payloadSigs&quot;:[],&quot;envelopeSigs&quot;:[{&quot;address&quot;:null,&quot;keyId&quot;:null,&quot;sig&quot;:null}]}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/pre-authz?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;sessionId=d1JRA027C-PsI-Geu3Hf</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/blocks-570" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="height" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">height</stringProp>
                    <stringProp name="Argument.value">final</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="expand" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">expand</stringProp>
                    <stringProp name="Argument.value">payload</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">rest-testnet.onflow.org</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/v1/blocks</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/accounts/f086a545ce3c552d-571" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="block_height" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">block_height</stringProp>
                    <stringProp name="Argument.value">sealed</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="expand" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">expand</stringProp>
                    <stringProp name="Argument.value">contracts,keys</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">rest-testnet.onflow.org</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/v1/accounts/f086a545ce3c552d</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authz?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;sessionId=d1JRA027C-PsI-Geu3Hf-572" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authz?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;sessionId=d1JRA027C-PsI-Geu3Hf</stringProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authz?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;sessionId=d1JRA027C-PsI-Geu3Hf-573" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;fclVersion&quot;:&quot;1.3.2&quot;,&quot;service&quot;:{&quot;params&quot;:{&quot;sessionId&quot;:&quot;d1JRA027C-PsI-Geu3Hf&quot;}},&quot;config&quot;:{&quot;services&quot;:{&quot;OpenID.scopes&quot;:&quot;email!&quot;},&quot;app&quot;:{&quot;title&quot;:&quot;Flow NFT Marketplace&quot;,&quot;icon&quot;:&quot;${scheme}://dtz22sdwncfa9.cloudfront.net/NFT-Flow-Resource/AmSulRXn_400x400.jpg&quot;},&quot;client&quot;:{&quot;fclVersion&quot;:&quot;1.3.2&quot;,&quot;fclLibrary&quot;:&quot;${scheme}://github.com/onflow/fcl-js&quot;,&quot;hostname&quot;:&quot;qa.bloxmith.com&quot;}},&quot;f_type&quot;:&quot;Signable&quot;,&quot;f_vsn&quot;:&quot;1.0.1&quot;,&quot;message&quot;:&quot;464c4f572d56302e302d7472616e73616374696f6e0000000000000000000000f90d03b90c670a696d706f72742050726f6a656374522066726f6d203078663935313730376134626338356365340a696d706f7274204e6f6e46756e6769626c65546f6b656e2066726f6d203078363331653838616537663164376332300a696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a696d706f72742052756d626c652066726f6d203078613565393937373739326164396331320a696d706f727420426c6f786d6974684d61726b6574706c6163652066726f6d203078663935313730376134626338356365340a0a7472616e73616374696f6e286163636f756e743a20416464726573732c2069643a2055496e74363429207b0a0a20207072657061726528616363743a20417574684163636f756e7429207b0a0a202020206c657420436f6c6c656374696f6e436865636b203d20616363742e6765744361706162696c6974793c2650726f6a656374522e436f6c6c656374696f6e7b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e5075626c69637d3e282f7075626c69632f50726f6a65637452436f6c6c656374696f6e292e636865636b28290a202020200a202020206966202821436f6c6c656374696f6e436865636b29207b0a2020202020202020616363742e73617665283c2d2050726f6a656374522e637265617465456d707479436f6c6c656374696f6e28292c20746f3a202f73746f726167652f50726f6a65637452436f6c6c656374696f6e290a2020202020202020616363742e6c696e6b3c2650726f6a656374522e436f6c6c656374696f6e7b50726f6a656374522e436f6c6c656374696f6e5075626c69632c204e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e5075626c69637d3e282f7075626c69632f50726f6a65637452436f6c6c656374696f6e2c207461726765743a202f73746f726167652f50726f6a65637452436f6c6c656374696f6e290a2020202020202020616363742e6c696e6b3c2650726f6a656374522e436f6c6c656374696f6e3e282f707269766174652f50726f6a65637452436f6c6c656374696f6e2c207461726765743a202f73746f726167652f50726f6a65637452436f6c6c656374696f6e290a20202020202020200a20202020202020206c65742050726f6a65637452436f6c6c656374696f6e203d20616363742e6765744361706162696c6974793c2650726f6a656374522e436f6c6c656374696f6e3e282f707269766174652f50726f6a65637452436f6c6c656374696f6e290a20202020202020206c65742052756d626c65546f6b656e5661756c74203d20616363742e6765744361706162696c6974793c2652756d626c652e5661756c747b46756e6769626c65546f6b656e2e52656365697665727d3e282f7075626c69632f52756d626c655265636569766572290a20202020202020200a2020202020202020616363742e73617665283c2d20426c6f786d6974684d61726b6574706c6163652e63726561746553616c65436f6c6c656374696f6e2850726f6a65637452436f6c6c656374696f6e3a2050726f6a65637452436f6c6c656374696f6e2c20546f6b656e5661756c743a2052756d626c65546f6b656e5661756c74292c20746f3a202f73746f726167652f53616c65436f6c6c656374696f6e290a2020202020202020616363742e6c696e6b3c26426c6f786d6974684d61726b6574706c6163652e53616c65436f6c6c656374696f6e7b426c6f786d6974684d61726b6574706c6163652e53616c65436f6c6c656374696f6e5075626c69637d3e282f7075626c69632f53616c65436f6c6c656374696f6e2c207461726765743a202f73746f726167652f53616c65436f6c6c656374696f6e290a0a20202020202020206c65742073616c65436f6c6c656374696f6e203d206765744163636f756e74286163636f756e74292e6765744361706162696c697479282f7075626c69632f53616c65436f6c6c656374696f6e290a2020202020202020202020202020202020202020202020202e626f72726f773c26426c6f786d6974684d61726b6574706c6163652e53616c65436f6c6c656374696f6e7b426c6f786d6974684d61726b6574706c6163652e53616c65436f6c6c656374696f6e5075626c69637d3e28290a2020202020202020202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f7720746865207573657227732053616c65436f6c6c656374696f6e22290a0a20202020202020206c657420726563697069656e74436f6c6c656374696f6e203d206765744163636f756e7428616363742e61646472657373292e6765744361706162696c697479282f7075626c69632f50726f6a65637452436f6c6c656374696f6e29200a2020202020202020202020202020202020202020202020202e626f72726f773c2650726f6a656374522e436f6c6c656374696f6e7b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e5075626c69637d3e28290a2020202020202020202020202020202020202020202020203f3f2070616e6963282243616e277420676574207468652055736572277320636f6c6c656374696f6e2e22290a0a20202020202020206c6574207072696365203d2073616c65436f6c6c656374696f6e2e67657450726963652869643a2055496e74363428696429290a20202020202020206c6574207061796d656e74203c2d20616363742e626f72726f773c2652756d626c652e5661756c743e2866726f6d3a202f73746f726167652f52756d626c655661756c7429212e776974686472617728616d6f756e743a2070726963652920617321204052756d626c652e5661756c740a202020202020202073616c65436f6c6c656374696f6e2e70757263686173652869643a2055496e743634286964292c206e65774f776e65723a20616363742e616464726573732c20726563697069656e74436f6c6c656374696f6e3a20726563697069656e74436f6c6c656374696f6e2c207061796d656e743a203c2d207061796d656e74290a0a202020207d20656c7365207b0a0a20202020202020206c65742073616c65436f6c6c656374696f6e203d206765744163636f756e74286163636f756e74292e6765744361706162696c697479282f7075626c69632f53616c65436f6c6c656374696f6e290a2020202020202020202020202020202020202020202020202e626f72726f773c26426c6f786d6974684d61726b6574706c6163652e53616c65436f6c6c656374696f6e7b426c6f786d6974684d61726b6574706c6163652e53616c65436f6c6c656374696f6e5075626c69637d3e28290a2020202020202020202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f7720746865207573657227732053616c65436f6c6c656374696f6e22290a20202020202020206c657420726563697069656e74436f6c6c656374696f6e203d206765744163636f756e7428616363742e61646472657373292e6765744361706162696c697479282f7075626c69632f50726f6a65637452436f6c6c656374696f6e29200a2020202020202020202020202020202020202020202020202e626f72726f773c2650726f6a656374522e436f6c6c656374696f6e7b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e5075626c69637d3e28290a2020202020202020202020202020202020202020202020203f3f2070616e6963282243616e277420676574207468652055736572277320636f6c6c656374696f6e2e22290a20202020202020206c6574207072696365203d2073616c65436f6c6c656374696f6e2e67657450726963652869643a2055496e74363428696429290a20202020202020206c6574207061796d656e74203c2d20616363742e626f72726f773c2652756d626c652e5661756c743e2866726f6d3a202f73746f726167652f52756d626c655661756c7429212e776974686472617728616d6f756e743a2070726963652920617321204052756d626c652e5661756c740a202020202020202073616c65436f6c6c656374696f6e2e70757263686173652869643a2055496e743634286964292c206e65774f776e65723a20616363742e616464726573732c20726563697069656e74436f6c6c656374696f6e3a20726563697069656e74436f6c6c656374696f6e2c207061796d656e743a203c2d207061796d656e74290a20207d0a7d0a0a202065786563757465207b0a202020206c6f6728224120757365722070757263686173656420616e204e465422290a20207d0a7d0af851af7b2274797065223a2241646472657373222c2276616c7565223a22307866393531373037613462633835636534227da07b2274797065223a2255496e743634222c2276616c7565223a2236363430227da0b05df0502608356f40a7d4993e1598f83dc7fb1378e5e8a7a9bbdaf1007f7d2b8203e788f086a545ce3c552d8201d282020088f086a545ce3c552dc988219c841f936a343b&quot;,&quot;addr&quot;:&quot;219c841f936a343b&quot;,&quot;keyId&quot;:1,&quot;roles&quot;:{&quot;proposer&quot;:false,&quot;payer&quot;:false,&quot;authorizer&quot;:true},&quot;cadence&quot;:&quot;\nimport ProjectR from 0xf951707a4bc85ce4\nimport NonFungibleToken from 0x631e88ae7f1d7c20\nimport FungibleToken from 0x9a0766d93b6608b7\nimport Rumble from 0xa5e9977792ad9c12\nimport BloxmithMarketplace from 0xf951707a4bc85ce4\n\ntransaction(account: Address, id: UInt64) {\n\n  prepare(acct: AuthAccount) {\n\n    let CollectionCheck = acct.getCapability&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;(/public/ProjectRCollection).check()\n    \n    if (!CollectionCheck) {\n        acct.save(&lt;- ProjectR.createEmptyCollection(), to: /storage/ProjectRCollection)\n        acct.link&lt;&amp;ProjectR.Collection{ProjectR.CollectionPublic, NonFungibleToken.CollectionPublic}&gt;(/public/ProjectRCollection, target: /storage/ProjectRCollection)\n        acct.link&lt;&amp;ProjectR.Collection&gt;(/private/ProjectRCollection, target: /storage/ProjectRCollection)\n        \n        let ProjectRCollection = acct.getCapability&lt;&amp;ProjectR.Collection&gt;(/private/ProjectRCollection)\n        let RumbleTokenVault = acct.getCapability&lt;&amp;Rumble.Vault{FungibleToken.Receiver}&gt;(/public/RumbleReceiver)\n        \n        acct.save(&lt;- BloxmithMarketplace.createSaleCollection(ProjectRCollection: ProjectRCollection, TokenVault: RumbleTokenVault), to: /storage/SaleCollection)\n        acct.link&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;(/public/SaleCollection, target: /storage/SaleCollection)\n\n        let saleCollection = getAccount(account).getCapability(/public/SaleCollection)\n                        .borrow&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;()\n                        ?? panic(\&quot;Could not borrow the user&apos;s SaleCollection\&quot;)\n\n        let recipientCollection = getAccount(acct.address).getCapability(/public/ProjectRCollection) \n                        .borrow&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;()\n                        ?? panic(\&quot;Can&apos;t get the User&apos;s collection.\&quot;)\n\n        let price = saleCollection.getPrice(id: UInt64(id))\n        let payment &lt;- acct.borrow&lt;&amp;Rumble.Vault&gt;(from: /storage/RumbleVault)!.withdraw(amount: price) as! @Rumble.Vault\n        saleCollection.purchase(id: UInt64(id), newOwner: acct.address, recipientCollection: recipientCollection, payment: &lt;- payment)\n\n    } else {\n\n        let saleCollection = getAccount(account).getCapability(/public/SaleCollection)\n                        .borrow&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;()\n                        ?? panic(\&quot;Could not borrow the user&apos;s SaleCollection\&quot;)\n        let recipientCollection = getAccount(acct.address).getCapability(/public/ProjectRCollection) \n                        .borrow&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;()\n                        ?? panic(\&quot;Can&apos;t get the User&apos;s collection.\&quot;)\n        let price = saleCollection.getPrice(id: UInt64(id))\n        let payment &lt;- acct.borrow&lt;&amp;Rumble.Vault&gt;(from: /storage/RumbleVault)!.withdraw(amount: price) as! @Rumble.Vault\n        saleCollection.purchase(id: UInt64(id), newOwner: acct.address, recipientCollection: recipientCollection, payment: &lt;- payment)\n  }\n}\n\n  execute {\n    log(\&quot;A user purchased an NFT\&quot;)\n  }\n}\n&quot;,&quot;args&quot;:[{&quot;type&quot;:&quot;Address&quot;,&quot;value&quot;:&quot;0xf951707a4bc85ce4&quot;},{&quot;type&quot;:&quot;UInt64&quot;,&quot;value&quot;:&quot;6640&quot;}],&quot;interaction&quot;:{&quot;tag&quot;:&quot;TRANSACTION&quot;,&quot;assigns&quot;:{},&quot;status&quot;:&quot;OK&quot;,&quot;reason&quot;:null,&quot;accounts&quot;:{&quot;0xf086a545ce3c552d-466&quot;:{&quot;tempId&quot;:&quot;0xf086a545ce3c552d-466&quot;,&quot;addr&quot;:&quot;f086a545ce3c552d&quot;,&quot;keyId&quot;:466,&quot;role&quot;:{&quot;proposer&quot;:true,&quot;payer&quot;:true,&quot;authorizer&quot;:false},&quot;resolve&quot;:null,&quot;sequenceNum&quot;:512},&quot;0x219c841f936a343b-1&quot;:{&quot;tempId&quot;:&quot;0x219c841f936a343b-1&quot;,&quot;addr&quot;:&quot;219c841f936a343b&quot;,&quot;keyId&quot;:1,&quot;role&quot;:{&quot;proposer&quot;:false,&quot;payer&quot;:false,&quot;authorizer&quot;:true},&quot;resolve&quot;:null}},&quot;params&quot;:{},&quot;arguments&quot;:{&quot;deudmrx3i8&quot;:{&quot;kind&quot;:&quot;ARGUMENT&quot;,&quot;tempId&quot;:&quot;deudmrx3i8&quot;,&quot;value&quot;:&quot;0xf951707a4bc85ce4&quot;,&quot;asArgument&quot;:{&quot;type&quot;:&quot;Address&quot;,&quot;value&quot;:&quot;0xf951707a4bc85ce4&quot;},&quot;xform&quot;:{&quot;label&quot;:&quot;Address&quot;}},&quot;rtscux2d62&quot;:{&quot;kind&quot;:&quot;ARGUMENT&quot;,&quot;tempId&quot;:&quot;rtscux2d62&quot;,&quot;value&quot;:6640,&quot;asArgument&quot;:{&quot;type&quot;:&quot;UInt64&quot;,&quot;value&quot;:&quot;6640&quot;},&quot;xform&quot;:{&quot;label&quot;:&quot;UInt64&quot;}}},&quot;message&quot;:{&quot;cadence&quot;:&quot;\nimport ProjectR from 0xf951707a4bc85ce4\nimport NonFungibleToken from 0x631e88ae7f1d7c20\nimport FungibleToken from 0x9a0766d93b6608b7\nimport Rumble from 0xa5e9977792ad9c12\nimport BloxmithMarketplace from 0xf951707a4bc85ce4\n\ntransaction(account: Address, id: UInt64) {\n\n  prepare(acct: AuthAccount) {\n\n    let CollectionCheck = acct.getCapability&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;(/public/ProjectRCollection).check()\n    \n    if (!CollectionCheck) {\n        acct.save(&lt;- ProjectR.createEmptyCollection(), to: /storage/ProjectRCollection)\n        acct.link&lt;&amp;ProjectR.Collection{ProjectR.CollectionPublic, NonFungibleToken.CollectionPublic}&gt;(/public/ProjectRCollection, target: /storage/ProjectRCollection)\n        acct.link&lt;&amp;ProjectR.Collection&gt;(/private/ProjectRCollection, target: /storage/ProjectRCollection)\n        \n        let ProjectRCollection = acct.getCapability&lt;&amp;ProjectR.Collection&gt;(/private/ProjectRCollection)\n        let RumbleTokenVault = acct.getCapability&lt;&amp;Rumble.Vault{FungibleToken.Receiver}&gt;(/public/RumbleReceiver)\n        \n        acct.save(&lt;- BloxmithMarketplace.createSaleCollection(ProjectRCollection: ProjectRCollection, TokenVault: RumbleTokenVault), to: /storage/SaleCollection)\n        acct.link&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;(/public/SaleCollection, target: /storage/SaleCollection)\n\n        let saleCollection = getAccount(account).getCapability(/public/SaleCollection)\n                        .borrow&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;()\n                        ?? panic(\&quot;Could not borrow the user&apos;s SaleCollection\&quot;)\n\n        let recipientCollection = getAccount(acct.address).getCapability(/public/ProjectRCollection) \n                        .borrow&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;()\n                        ?? panic(\&quot;Can&apos;t get the User&apos;s collection.\&quot;)\n\n        let price = saleCollection.getPrice(id: UInt64(id))\n        let payment &lt;- acct.borrow&lt;&amp;Rumble.Vault&gt;(from: /storage/RumbleVault)!.withdraw(amount: price) as! @Rumble.Vault\n        saleCollection.purchase(id: UInt64(id), newOwner: acct.address, recipientCollection: recipientCollection, payment: &lt;- payment)\n\n    } else {\n\n        let saleCollection = getAccount(account).getCapability(/public/SaleCollection)\n                        .borrow&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;()\n                        ?? panic(\&quot;Could not borrow the user&apos;s SaleCollection\&quot;)\n        let recipientCollection = getAccount(acct.address).getCapability(/public/ProjectRCollection) \n                        .borrow&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;()\n                        ?? panic(\&quot;Can&apos;t get the User&apos;s collection.\&quot;)\n        let price = saleCollection.getPrice(id: UInt64(id))\n        let payment &lt;- acct.borrow&lt;&amp;Rumble.Vault&gt;(from: /storage/RumbleVault)!.withdraw(amount: price) as! @Rumble.Vault\n        saleCollection.purchase(id: UInt64(id), newOwner: acct.address, recipientCollection: recipientCollection, payment: &lt;- payment)\n  }\n}\n\n  execute {\n    log(\&quot;A user purchased an NFT\&quot;)\n  }\n}\n&quot;,&quot;refBlock&quot;:&quot;b05df0502608356f40a7d4993e1598f83dc7fb1378e5e8a7a9bbdaf1007f7d2b&quot;,&quot;computeLimit&quot;:999,&quot;proposer&quot;:null,&quot;payer&quot;:null,&quot;authorizations&quot;:[],&quot;params&quot;:[],&quot;arguments&quot;:[&quot;deudmrx3i8&quot;,&quot;rtscux2d62&quot;]},&quot;proposer&quot;:&quot;0xf086a545ce3c552d-466&quot;,&quot;authorizations&quot;:[&quot;0x219c841f936a343b-1&quot;],&quot;payer&quot;:[&quot;0xf086a545ce3c552d-466&quot;],&quot;events&quot;:{&quot;eventType&quot;:null,&quot;start&quot;:null,&quot;end&quot;:null,&quot;blockIds&quot;:[]},&quot;transaction&quot;:{&quot;id&quot;:null},&quot;block&quot;:{&quot;id&quot;:null,&quot;height&quot;:null,&quot;isSealed&quot;:null},&quot;account&quot;:{&quot;addr&quot;:null},&quot;collection&quot;:{&quot;id&quot;:null}},&quot;voucher&quot;:{&quot;cadence&quot;:&quot;\nimport ProjectR from 0xf951707a4bc85ce4\nimport NonFungibleToken from 0x631e88ae7f1d7c20\nimport FungibleToken from 0x9a0766d93b6608b7\nimport Rumble from 0xa5e9977792ad9c12\nimport BloxmithMarketplace from 0xf951707a4bc85ce4\n\ntransaction(account: Address, id: UInt64) {\n\n  prepare(acct: AuthAccount) {\n\n    let CollectionCheck = acct.getCapability&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;(/public/ProjectRCollection).check()\n    \n    if (!CollectionCheck) {\n        acct.save(&lt;- ProjectR.createEmptyCollection(), to: /storage/ProjectRCollection)\n        acct.link&lt;&amp;ProjectR.Collection{ProjectR.CollectionPublic, NonFungibleToken.CollectionPublic}&gt;(/public/ProjectRCollection, target: /storage/ProjectRCollection)\n        acct.link&lt;&amp;ProjectR.Collection&gt;(/private/ProjectRCollection, target: /storage/ProjectRCollection)\n        \n        let ProjectRCollection = acct.getCapability&lt;&amp;ProjectR.Collection&gt;(/private/ProjectRCollection)\n        let RumbleTokenVault = acct.getCapability&lt;&amp;Rumble.Vault{FungibleToken.Receiver}&gt;(/public/RumbleReceiver)\n        \n        acct.save(&lt;- BloxmithMarketplace.createSaleCollection(ProjectRCollection: ProjectRCollection, TokenVault: RumbleTokenVault), to: /storage/SaleCollection)\n        acct.link&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;(/public/SaleCollection, target: /storage/SaleCollection)\n\n        let saleCollection = getAccount(account).getCapability(/public/SaleCollection)\n                        .borrow&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;()\n                        ?? panic(\&quot;Could not borrow the user&apos;s SaleCollection\&quot;)\n\n        let recipientCollection = getAccount(acct.address).getCapability(/public/ProjectRCollection) \n                        .borrow&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;()\n                        ?? panic(\&quot;Can&apos;t get the User&apos;s collection.\&quot;)\n\n        let price = saleCollection.getPrice(id: UInt64(id))\n        let payment &lt;- acct.borrow&lt;&amp;Rumble.Vault&gt;(from: /storage/RumbleVault)!.withdraw(amount: price) as! @Rumble.Vault\n        saleCollection.purchase(id: UInt64(id), newOwner: acct.address, recipientCollection: recipientCollection, payment: &lt;- payment)\n\n    } else {\n\n        let saleCollection = getAccount(account).getCapability(/public/SaleCollection)\n                        .borrow&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;()\n                        ?? panic(\&quot;Could not borrow the user&apos;s SaleCollection\&quot;)\n        let recipientCollection = getAccount(acct.address).getCapability(/public/ProjectRCollection) \n                        .borrow&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;()\n                        ?? panic(\&quot;Can&apos;t get the User&apos;s collection.\&quot;)\n        let price = saleCollection.getPrice(id: UInt64(id))\n        let payment &lt;- acct.borrow&lt;&amp;Rumble.Vault&gt;(from: /storage/RumbleVault)!.withdraw(amount: price) as! @Rumble.Vault\n        saleCollection.purchase(id: UInt64(id), newOwner: acct.address, recipientCollection: recipientCollection, payment: &lt;- payment)\n  }\n}\n\n  execute {\n    log(\&quot;A user purchased an NFT\&quot;)\n  }\n}\n&quot;,&quot;refBlock&quot;:&quot;b05df0502608356f40a7d4993e1598f83dc7fb1378e5e8a7a9bbdaf1007f7d2b&quot;,&quot;computeLimit&quot;:999,&quot;arguments&quot;:[{&quot;type&quot;:&quot;Address&quot;,&quot;value&quot;:&quot;0xf951707a4bc85ce4&quot;},{&quot;type&quot;:&quot;UInt64&quot;,&quot;value&quot;:&quot;6640&quot;}],&quot;proposalKey&quot;:{&quot;address&quot;:&quot;0xf086a545ce3c552d&quot;,&quot;keyId&quot;:466,&quot;sequenceNum&quot;:512},&quot;payer&quot;:&quot;0xf086a545ce3c552d&quot;,&quot;authorizers&quot;:[&quot;0x219c841f936a343b&quot;],&quot;payloadSigs&quot;:[{&quot;address&quot;:&quot;0x219c841f936a343b&quot;,&quot;keyId&quot;:1}],&quot;envelopeSigs&quot;:[{&quot;address&quot;:&quot;0xf086a545ce3c552d&quot;,&quot;keyId&quot;:466}]}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authz?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;sessionId=d1JRA027C-PsI-Geu3Hf</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/authz/9EW3iVwpS-575" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="l6n" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">l6n</stringProp>
                    <stringProp name="Argument.value">${scheme}://qa.bloxmith.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/authz/9EW3iVwpS</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authz?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;authorizationId=9EW3iVwpS&amp;sessionId=d1JRA027C-PsI-Geu3Hf-574" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authz?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;authorizationId=9EW3iVwpS&amp;sessionId=d1JRA027C-PsI-Geu3Hf</stringProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authz-576" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="l6n" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">l6n</stringProp>
                    <stringProp name="Argument.value">${scheme}://qa.bloxmith.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="authorizationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">authorizationId</stringProp>
                    <stringProp name="Argument.value">9EW3iVwpS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                    <stringProp name="Argument.value">d1JRA027C-PsI-Geu3Hf</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authz</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authzDetails-578" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="authorizationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">authorizationId</stringProp>
                    <stringProp name="Argument.value">9EW3iVwpS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authzDetails</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/blocto/account/assets-577" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/blocto/account/assets</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/access/flow.access.AccessAPI/ExecuteScriptAtLatestBlock-581" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#x0;&#x0;&#x0;&#x2;�&#xd;
�&#x5;&#xd;
import FlowStorageFees from 0x8c5303eaa26202d6&#xd;
import FUSD from 0xe223d8a629e49c68&#xd;
import FiatToken from 0xa983fecbed621163&#xd;
import FungibleToken from 0x9a0766d93b6608b7&#xd;
&#xd;
pub fun main(address: Address): [UFix64] {&#xd;
&#xd;
  let fusdBalanceRef = getAccount(address).getCapability(/public/fusdBalance)&#xd;
    .borrow&lt;&amp;FUSD.Vault{FungibleToken.Balance}&gt;()&#xd;
&#xd;
  let usdcBalanceRef = getAccount(address).getCapability(FiatToken.VaultBalancePubPath)&#xd;
    .borrow&lt;&amp;FiatToken.Vault{FungibleToken.Balance}&gt;()&#xd;
                          &#xd;
  return [FlowStorageFees.defaultTokenAvailableBalance(address), fusdBalanceRef?.balance ?? 0.0, usdcBalanceRef?.balance ?? 0.0]&#xd;
}&#xd;
&#x12;/{&quot;type&quot;:&quot;Address&quot;,&quot;value&quot;:&quot;0x219c841f936a343b&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/access/flow.access.AccessAPI/ExecuteScriptAtLatestBlock</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authz?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;authorizationId=9EW3iVwpS-579" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authz?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;authorizationId=9EW3iVwpS</stringProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authz-582" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="l6n" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">l6n</stringProp>
                    <stringProp name="Argument.value">${scheme}://qa.bloxmith.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="authorizationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">authorizationId</stringProp>
                    <stringProp name="Argument.value">9EW3iVwpS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authz</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/templates/search-580" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flix.flow.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/v1/templates/search</stringProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authz-584" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="l6n" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">l6n</stringProp>
                    <stringProp name="Argument.value">${scheme}://qa.bloxmith.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="authorizationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">authorizationId</stringProp>
                    <stringProp name="Argument.value">9EW3iVwpS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authz</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/templates/search-583" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;cadence_base64&quot;:&quot;CmltcG9ydCBQcm9qZWN0UiBmcm9tIDB4Zjk1MTcwN2E0YmM4NWNlNAppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwppbXBvcnQgUnVtYmxlIGZyb20gMHhhNWU5OTc3NzkyYWQ5YzEyCmltcG9ydCBCbG94bWl0aE1hcmtldHBsYWNlIGZyb20gMHhmOTUxNzA3YTRiYzg1Y2U0Cgp0cmFuc2FjdGlvbihhY2NvdW50OiBBZGRyZXNzLCBpZDogVUludDY0KSB7CgogIHByZXBhcmUoYWNjdDogQXV0aEFjY291bnQpIHsKCiAgICBsZXQgQ29sbGVjdGlvbkNoZWNrID0gYWNjdC5nZXRDYXBhYmlsaXR5PCZQcm9qZWN0Ui5Db2xsZWN0aW9ue05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KC9wdWJsaWMvUHJvamVjdFJDb2xsZWN0aW9uKS5jaGVjaygpCiAgICAKICAgIGlmICghQ29sbGVjdGlvbkNoZWNrKSB7CiAgICAgICAgYWNjdC5zYXZlKDwtIFByb2plY3RSLmNyZWF0ZUVtcHR5Q29sbGVjdGlvbigpLCB0bzogL3N0b3JhZ2UvUHJvamVjdFJDb2xsZWN0aW9uKQogICAgICAgIGFjY3QubGluazwmUHJvamVjdFIuQ29sbGVjdGlvbntQcm9qZWN0Ui5Db2xsZWN0aW9uUHVibGljLCBOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9PigvcHVibGljL1Byb2plY3RSQ29sbGVjdGlvbiwgdGFyZ2V0OiAvc3RvcmFnZS9Qcm9qZWN0UkNvbGxlY3Rpb24pCiAgICAgICAgYWNjdC5saW5rPCZQcm9qZWN0Ui5Db2xsZWN0aW9uPigvcHJpdmF0ZS9Qcm9qZWN0UkNvbGxlY3Rpb24sIHRhcmdldDogL3N0b3JhZ2UvUHJvamVjdFJDb2xsZWN0aW9uKQogICAgICAgIAogICAgICAgIGxldCBQcm9qZWN0UkNvbGxlY3Rpb24gPSBhY2N0LmdldENhcGFiaWxpdHk8JlByb2plY3RSLkNvbGxlY3Rpb24+KC9wcml2YXRlL1Byb2plY3RSQ29sbGVjdGlvbikKICAgICAgICBsZXQgUnVtYmxlVG9rZW5WYXVsdCA9IGFjY3QuZ2V0Q2FwYWJpbGl0eTwmUnVtYmxlLlZhdWx0e0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PigvcHVibGljL1J1bWJsZVJlY2VpdmVyKQogICAgICAgIAogICAgICAgIGFjY3Quc2F2ZSg8LSBCbG94bWl0aE1hcmtldHBsYWNlLmNyZWF0ZVNhbGVDb2xsZWN0aW9uKFByb2plY3RSQ29sbGVjdGlvbjogUHJvamVjdFJDb2xsZWN0aW9uLCBUb2tlblZhdWx0OiBSdW1ibGVUb2tlblZhdWx0KSwgdG86IC9zdG9yYWdlL1NhbGVDb2xsZWN0aW9uKQogICAgICAgIGFjY3QubGluazwmQmxveG1pdGhNYXJrZXRwbGFjZS5TYWxlQ29sbGVjdGlvbntCbG94bWl0aE1hcmtldHBsYWNlLlNhbGVDb2xsZWN0aW9uUHVibGljfT4oL3B1YmxpYy9TYWxlQ29sbGVjdGlvbiwgdGFyZ2V0OiAvc3RvcmFnZS9TYWxlQ29sbGVjdGlvbikKCiAgICAgICAgbGV0IHNhbGVDb2xsZWN0aW9uID0gZ2V0QWNjb3VudChhY2NvdW50KS5nZXRDYXBhYmlsaXR5KC9wdWJsaWMvU2FsZUNvbGxlY3Rpb24pCiAgICAgICAgICAgICAgICAgICAgICAgIC5ib3Jyb3c8JkJsb3htaXRoTWFya2V0cGxhY2UuU2FsZUNvbGxlY3Rpb257QmxveG1pdGhNYXJrZXRwbGFjZS5TYWxlQ29sbGVjdGlvblB1YmxpY30+KCkKICAgICAgICAgICAgICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgdGhlIHVzZXIncyBTYWxlQ29sbGVjdGlvbiIpCgogICAgICAgIGxldCByZWNpcGllbnRDb2xsZWN0aW9uID0gZ2V0QWNjb3VudChhY2N0LmFkZHJlc3MpLmdldENhcGFiaWxpdHkoL3B1YmxpYy9Qcm9qZWN0UkNvbGxlY3Rpb24pIAogICAgICAgICAgICAgICAgICAgICAgICAuYm9ycm93PCZQcm9qZWN0Ui5Db2xsZWN0aW9ue05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KCkKICAgICAgICAgICAgICAgICAgICAgICAgPz8gcGFuaWMoIkNhbid0IGdldCB0aGUgVXNlcidzIGNvbGxlY3Rpb24uIikKCiAgICAgICAgbGV0IHByaWNlID0gc2FsZUNvbGxlY3Rpb24uZ2V0UHJpY2UoaWQ6IFVJbnQ2NChpZCkpCiAgICAgICAgbGV0IHBheW1lbnQgPC0gYWNjdC5ib3Jyb3c8JlJ1bWJsZS5WYXVsdD4oZnJvbTogL3N0b3JhZ2UvUnVtYmxlVmF1bHQpIS53aXRoZHJhdyhhbW91bnQ6IHByaWNlKSBhcyEgQFJ1bWJsZS5WYXVsdAogICAgICAgIHNhbGVDb2xsZWN0aW9uLnB1cmNoYXNlKGlkOiBVSW50NjQoaWQpLCBuZXdPd25lcjogYWNjdC5hZGRyZXNzLCByZWNpcGllbnRDb2xsZWN0aW9uOiByZWNpcGllbnRDb2xsZWN0aW9uLCBwYXltZW50OiA8LSBwYXltZW50KQoKICAgIH0gZWxzZSB7CgogICAgICAgIGxldCBzYWxlQ29sbGVjdGlvbiA9IGdldEFjY291bnQoYWNjb3VudCkuZ2V0Q2FwYWJpbGl0eSgvcHVibGljL1NhbGVDb2xsZWN0aW9uKQogICAgICAgICAgICAgICAgICAgICAgICAuYm9ycm93PCZCbG94bWl0aE1hcmtldHBsYWNlLlNhbGVDb2xsZWN0aW9ue0Jsb3htaXRoTWFya2V0cGxhY2UuU2FsZUNvbGxlY3Rpb25QdWJsaWN9PigpCiAgICAgICAgICAgICAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHRoZSB1c2VyJ3MgU2FsZUNvbGxlY3Rpb24iKQogICAgICAgIGxldCByZWNpcGllbnRDb2xsZWN0aW9uID0gZ2V0QWNjb3VudChhY2N0LmFkZHJlc3MpLmdldENhcGFiaWxpdHkoL3B1YmxpYy9Qcm9qZWN0UkNvbGxlY3Rpb24pIAogICAgICAgICAgICAgICAgICAgICAgICAuYm9ycm93PCZQcm9qZWN0Ui5Db2xsZWN0aW9ue05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KCkKICAgICAgICAgICAgICAgICAgICAgICAgPz8gcGFuaWMoIkNhbid0IGdldCB0aGUgVXNlcidzIGNvbGxlY3Rpb24uIikKICAgICAgICBsZXQgcHJpY2UgPSBzYWxlQ29sbGVjdGlvbi5nZXRQcmljZShpZDogVUludDY0KGlkKSkKICAgICAgICBsZXQgcGF5bWVudCA8LSBhY2N0LmJvcnJvdzwmUnVtYmxlLlZhdWx0Pihmcm9tOiAvc3RvcmFnZS9SdW1ibGVWYXVsdCkhLndpdGhkcmF3KGFtb3VudDogcHJpY2UpIGFzISBAUnVtYmxlLlZhdWx0CiAgICAgICAgc2FsZUNvbGxlY3Rpb24ucHVyY2hhc2UoaWQ6IFVJbnQ2NChpZCksIG5ld093bmVyOiBhY2N0LmFkZHJlc3MsIHJlY2lwaWVudENvbGxlY3Rpb246IHJlY2lwaWVudENvbGxlY3Rpb24sIHBheW1lbnQ6IDwtIHBheW1lbnQpCiAgfQp9CgogIGV4ZWN1dGUgewogICAgbG9nKCJBIHVzZXIgcHVyY2hhc2VkIGFuIE5GVCIpCiAgfQp9Cg==&quot;,&quot;network&quot;:&quot;testnet&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flix.flow.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/v1/templates/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authz-585" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="l6n" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">l6n</stringProp>
                    <stringProp name="Argument.value">${scheme}://qa.bloxmith.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="authorizationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">authorizationId</stringProp>
                    <stringProp name="Argument.value">9EW3iVwpS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authz</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/scripts?block_height=sealed-586" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;script&quot;:&quot;CiAgICAgIGltcG9ydCBSdW1ibGUgZnJvbSAweGE1ZTk5Nzc3OTJhZDljMTIKICAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKICAgICAgcHViIGZ1biBtYWluKGFjY291bnQ6IEFkZHJlc3MpOiBVRml4NjQgewogICAgICAgICAgbGV0IFJlY2lwaWVudFZhdWx0ID0gZ2V0QWNjb3VudChhY2NvdW50KS5nZXRDYXBhYmlsaXR5KC9wdWJsaWMvUnVtYmxlUHVibGljKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmJvcnJvdzwmUnVtYmxlLlZhdWx0e0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IFJlY2lwaWVudCBWYXVsdCByZWZlcmVuY2UiKQogICAgICAgICAgcmV0dXJuIFJlY2lwaWVudFZhdWx0LmJhbGFuY2UKICAgICAgfQogICAgICA=&quot;,&quot;arguments&quot;:[&quot;eyJ0eXBlIjoiQWRkcmVzcyIsInZhbHVlIjoiMHgyMTljODQxZjkzNmEzNDNiIn0=&quot;]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">rest-testnet.onflow.org</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/v1/scripts?block_height=sealed</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authz-588" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="l6n" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">l6n</stringProp>
                    <stringProp name="Argument.value">${scheme}://qa.bloxmith.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="authorizationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">authorizationId</stringProp>
                    <stringProp name="Argument.value">9EW3iVwpS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authz</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/authz-587" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;authorizationId&quot;:&quot;9EW3iVwpS&quot;,&quot;action&quot;:&quot;approve&quot;,&quot;sessionId&quot;:&quot;d1JRA027C-PsI-Geu3Hf&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/authz</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/payer?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;sessionId=d1JRA027C-PsI-Geu3Hf&amp;payerId=8c173fd2-6539-4a03-8d59-d48c6c84a9be-589" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/payer?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;sessionId=d1JRA027C-PsI-Geu3Hf&amp;payerId=8c173fd2-6539-4a03-8d59-d48c6c84a9be</stringProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/flow/payer?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;sessionId=d1JRA027C-PsI-Geu3Hf&amp;payerId=8c173fd2-6539-4a03-8d59-d48c6c84a9be-590" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;fclVersion&quot;:&quot;1.3.2&quot;,&quot;service&quot;:{&quot;params&quot;:{&quot;sessionId&quot;:&quot;d1JRA027C-PsI-Geu3Hf&quot;,&quot;payerId&quot;:&quot;8c173fd2-6539-4a03-8d59-d48c6c84a9be&quot;}},&quot;config&quot;:{&quot;services&quot;:{&quot;OpenID.scopes&quot;:&quot;email!&quot;},&quot;app&quot;:{&quot;title&quot;:&quot;Flow NFT Marketplace&quot;,&quot;icon&quot;:&quot;${scheme}://dtz22sdwncfa9.cloudfront.net/NFT-Flow-Resource/AmSulRXn_400x400.jpg&quot;},&quot;client&quot;:{&quot;fclVersion&quot;:&quot;1.3.2&quot;,&quot;fclLibrary&quot;:&quot;${scheme}://github.com/onflow/fcl-js&quot;,&quot;hostname&quot;:&quot;qa.bloxmith.com&quot;}},&quot;f_type&quot;:&quot;Signable&quot;,&quot;f_vsn&quot;:&quot;1.0.1&quot;,&quot;message&quot;:&quot;464c4f572d56302e302d7472616e73616374696f6e0000000000000000000000f90d4ef90d03b90c670a696d706f72742050726f6a656374522066726f6d203078663935313730376134626338356365340a696d706f7274204e6f6e46756e6769626c65546f6b656e2066726f6d203078363331653838616537663164376332300a696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a696d706f72742052756d626c652066726f6d203078613565393937373739326164396331320a696d706f727420426c6f786d6974684d61726b6574706c6163652066726f6d203078663935313730376134626338356365340a0a7472616e73616374696f6e286163636f756e743a20416464726573732c2069643a2055496e74363429207b0a0a20207072657061726528616363743a20417574684163636f756e7429207b0a0a202020206c657420436f6c6c656374696f6e436865636b203d20616363742e6765744361706162696c6974793c2650726f6a656374522e436f6c6c656374696f6e7b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e5075626c69637d3e282f7075626c69632f50726f6a65637452436f6c6c656374696f6e292e636865636b28290a202020200a202020206966202821436f6c6c656374696f6e436865636b29207b0a2020202020202020616363742e73617665283c2d2050726f6a656374522e637265617465456d707479436f6c6c656374696f6e28292c20746f3a202f73746f726167652f50726f6a65637452436f6c6c656374696f6e290a2020202020202020616363742e6c696e6b3c2650726f6a656374522e436f6c6c656374696f6e7b50726f6a656374522e436f6c6c656374696f6e5075626c69632c204e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e5075626c69637d3e282f7075626c69632f50726f6a65637452436f6c6c656374696f6e2c207461726765743a202f73746f726167652f50726f6a65637452436f6c6c656374696f6e290a2020202020202020616363742e6c696e6b3c2650726f6a656374522e436f6c6c656374696f6e3e282f707269766174652f50726f6a65637452436f6c6c656374696f6e2c207461726765743a202f73746f726167652f50726f6a65637452436f6c6c656374696f6e290a20202020202020200a20202020202020206c65742050726f6a65637452436f6c6c656374696f6e203d20616363742e6765744361706162696c6974793c2650726f6a656374522e436f6c6c656374696f6e3e282f707269766174652f50726f6a65637452436f6c6c656374696f6e290a20202020202020206c65742052756d626c65546f6b656e5661756c74203d20616363742e6765744361706162696c6974793c2652756d626c652e5661756c747b46756e6769626c65546f6b656e2e52656365697665727d3e282f7075626c69632f52756d626c655265636569766572290a20202020202020200a2020202020202020616363742e73617665283c2d20426c6f786d6974684d61726b6574706c6163652e63726561746553616c65436f6c6c656374696f6e2850726f6a65637452436f6c6c656374696f6e3a2050726f6a65637452436f6c6c656374696f6e2c20546f6b656e5661756c743a2052756d626c65546f6b656e5661756c74292c20746f3a202f73746f726167652f53616c65436f6c6c656374696f6e290a2020202020202020616363742e6c696e6b3c26426c6f786d6974684d61726b6574706c6163652e53616c65436f6c6c656374696f6e7b426c6f786d6974684d61726b6574706c6163652e53616c65436f6c6c656374696f6e5075626c69637d3e282f7075626c69632f53616c65436f6c6c656374696f6e2c207461726765743a202f73746f726167652f53616c65436f6c6c656374696f6e290a0a20202020202020206c65742073616c65436f6c6c656374696f6e203d206765744163636f756e74286163636f756e74292e6765744361706162696c697479282f7075626c69632f53616c65436f6c6c656374696f6e290a2020202020202020202020202020202020202020202020202e626f72726f773c26426c6f786d6974684d61726b6574706c6163652e53616c65436f6c6c656374696f6e7b426c6f786d6974684d61726b6574706c6163652e53616c65436f6c6c656374696f6e5075626c69637d3e28290a2020202020202020202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f7720746865207573657227732053616c65436f6c6c656374696f6e22290a0a20202020202020206c657420726563697069656e74436f6c6c656374696f6e203d206765744163636f756e7428616363742e61646472657373292e6765744361706162696c697479282f7075626c69632f50726f6a65637452436f6c6c656374696f6e29200a2020202020202020202020202020202020202020202020202e626f72726f773c2650726f6a656374522e436f6c6c656374696f6e7b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e5075626c69637d3e28290a2020202020202020202020202020202020202020202020203f3f2070616e6963282243616e277420676574207468652055736572277320636f6c6c656374696f6e2e22290a0a20202020202020206c6574207072696365203d2073616c65436f6c6c656374696f6e2e67657450726963652869643a2055496e74363428696429290a20202020202020206c6574207061796d656e74203c2d20616363742e626f72726f773c2652756d626c652e5661756c743e2866726f6d3a202f73746f726167652f52756d626c655661756c7429212e776974686472617728616d6f756e743a2070726963652920617321204052756d626c652e5661756c740a202020202020202073616c65436f6c6c656374696f6e2e70757263686173652869643a2055496e743634286964292c206e65774f776e65723a20616363742e616464726573732c20726563697069656e74436f6c6c656374696f6e3a20726563697069656e74436f6c6c656374696f6e2c207061796d656e743a203c2d207061796d656e74290a0a202020207d20656c7365207b0a0a20202020202020206c65742073616c65436f6c6c656374696f6e203d206765744163636f756e74286163636f756e74292e6765744361706162696c697479282f7075626c69632f53616c65436f6c6c656374696f6e290a2020202020202020202020202020202020202020202020202e626f72726f773c26426c6f786d6974684d61726b6574706c6163652e53616c65436f6c6c656374696f6e7b426c6f786d6974684d61726b6574706c6163652e53616c65436f6c6c656374696f6e5075626c69637d3e28290a2020202020202020202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f7720746865207573657227732053616c65436f6c6c656374696f6e22290a20202020202020206c657420726563697069656e74436f6c6c656374696f6e203d206765744163636f756e7428616363742e61646472657373292e6765744361706162696c697479282f7075626c69632f50726f6a65637452436f6c6c656374696f6e29200a2020202020202020202020202020202020202020202020202e626f72726f773c2650726f6a656374522e436f6c6c656374696f6e7b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e5075626c69637d3e28290a2020202020202020202020202020202020202020202020203f3f2070616e6963282243616e277420676574207468652055736572277320636f6c6c656374696f6e2e22290a20202020202020206c6574207072696365203d2073616c65436f6c6c656374696f6e2e67657450726963652869643a2055496e74363428696429290a20202020202020206c6574207061796d656e74203c2d20616363742e626f72726f773c2652756d626c652e5661756c743e2866726f6d3a202f73746f726167652f52756d626c655661756c7429212e776974686472617728616d6f756e743a2070726963652920617321204052756d626c652e5661756c740a202020202020202073616c65436f6c6c656374696f6e2e70757263686173652869643a2055496e743634286964292c206e65774f776e65723a20616363742e616464726573732c20726563697069656e74436f6c6c656374696f6e3a20726563697069656e74436f6c6c656374696f6e2c207061796d656e743a203c2d207061796d656e74290a20207d0a7d0a0a202065786563757465207b0a202020206c6f6728224120757365722070757263686173656420616e204e465422290a20207d0a7d0af851af7b2274797065223a2241646472657373222c2276616c7565223a22307866393531373037613462633835636534227da07b2274797065223a2255496e743634222c2276616c7565223a2236363430227da0b05df0502608356f40a7d4993e1598f83dc7fb1378e5e8a7a9bbdaf1007f7d2b8203e788f086a545ce3c552d8201d282020088f086a545ce3c552dc988219c841f936a343bf846f8440101b840ce5b51b7456420232e838995887cb95270f42abfd499f704e58d3a33e44ac9960a88ab613bec2e3c61aabffcce6f1080cef052e6164e6546952e6b13d61e9c79&quot;,&quot;addr&quot;:&quot;f086a545ce3c552d&quot;,&quot;keyId&quot;:466,&quot;roles&quot;:{&quot;proposer&quot;:true,&quot;payer&quot;:true,&quot;authorizer&quot;:false},&quot;cadence&quot;:&quot;\nimport ProjectR from 0xf951707a4bc85ce4\nimport NonFungibleToken from 0x631e88ae7f1d7c20\nimport FungibleToken from 0x9a0766d93b6608b7\nimport Rumble from 0xa5e9977792ad9c12\nimport BloxmithMarketplace from 0xf951707a4bc85ce4\n\ntransaction(account: Address, id: UInt64) {\n\n  prepare(acct: AuthAccount) {\n\n    let CollectionCheck = acct.getCapability&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;(/public/ProjectRCollection).check()\n    \n    if (!CollectionCheck) {\n        acct.save(&lt;- ProjectR.createEmptyCollection(), to: /storage/ProjectRCollection)\n        acct.link&lt;&amp;ProjectR.Collection{ProjectR.CollectionPublic, NonFungibleToken.CollectionPublic}&gt;(/public/ProjectRCollection, target: /storage/ProjectRCollection)\n        acct.link&lt;&amp;ProjectR.Collection&gt;(/private/ProjectRCollection, target: /storage/ProjectRCollection)\n        \n        let ProjectRCollection = acct.getCapability&lt;&amp;ProjectR.Collection&gt;(/private/ProjectRCollection)\n        let RumbleTokenVault = acct.getCapability&lt;&amp;Rumble.Vault{FungibleToken.Receiver}&gt;(/public/RumbleReceiver)\n        \n        acct.save(&lt;- BloxmithMarketplace.createSaleCollection(ProjectRCollection: ProjectRCollection, TokenVault: RumbleTokenVault), to: /storage/SaleCollection)\n        acct.link&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;(/public/SaleCollection, target: /storage/SaleCollection)\n\n        let saleCollection = getAccount(account).getCapability(/public/SaleCollection)\n                        .borrow&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;()\n                        ?? panic(\&quot;Could not borrow the user&apos;s SaleCollection\&quot;)\n\n        let recipientCollection = getAccount(acct.address).getCapability(/public/ProjectRCollection) \n                        .borrow&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;()\n                        ?? panic(\&quot;Can&apos;t get the User&apos;s collection.\&quot;)\n\n        let price = saleCollection.getPrice(id: UInt64(id))\n        let payment &lt;- acct.borrow&lt;&amp;Rumble.Vault&gt;(from: /storage/RumbleVault)!.withdraw(amount: price) as! @Rumble.Vault\n        saleCollection.purchase(id: UInt64(id), newOwner: acct.address, recipientCollection: recipientCollection, payment: &lt;- payment)\n\n    } else {\n\n        let saleCollection = getAccount(account).getCapability(/public/SaleCollection)\n                        .borrow&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;()\n                        ?? panic(\&quot;Could not borrow the user&apos;s SaleCollection\&quot;)\n        let recipientCollection = getAccount(acct.address).getCapability(/public/ProjectRCollection) \n                        .borrow&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;()\n                        ?? panic(\&quot;Can&apos;t get the User&apos;s collection.\&quot;)\n        let price = saleCollection.getPrice(id: UInt64(id))\n        let payment &lt;- acct.borrow&lt;&amp;Rumble.Vault&gt;(from: /storage/RumbleVault)!.withdraw(amount: price) as! @Rumble.Vault\n        saleCollection.purchase(id: UInt64(id), newOwner: acct.address, recipientCollection: recipientCollection, payment: &lt;- payment)\n  }\n}\n\n  execute {\n    log(\&quot;A user purchased an NFT\&quot;)\n  }\n}\n&quot;,&quot;args&quot;:[{&quot;type&quot;:&quot;Address&quot;,&quot;value&quot;:&quot;0xf951707a4bc85ce4&quot;},{&quot;type&quot;:&quot;UInt64&quot;,&quot;value&quot;:&quot;6640&quot;}],&quot;interaction&quot;:{&quot;tag&quot;:&quot;TRANSACTION&quot;,&quot;assigns&quot;:{},&quot;status&quot;:&quot;OK&quot;,&quot;reason&quot;:null,&quot;accounts&quot;:{&quot;0xf086a545ce3c552d-466&quot;:{&quot;tempId&quot;:&quot;0xf086a545ce3c552d-466&quot;,&quot;addr&quot;:&quot;f086a545ce3c552d&quot;,&quot;keyId&quot;:466,&quot;role&quot;:{&quot;proposer&quot;:true,&quot;payer&quot;:true,&quot;authorizer&quot;:false},&quot;resolve&quot;:null,&quot;sequenceNum&quot;:512},&quot;0x219c841f936a343b-1&quot;:{&quot;tempId&quot;:&quot;0x219c841f936a343b-1&quot;,&quot;addr&quot;:&quot;219c841f936a343b&quot;,&quot;keyId&quot;:1,&quot;role&quot;:{&quot;proposer&quot;:false,&quot;payer&quot;:false,&quot;authorizer&quot;:true},&quot;resolve&quot;:null,&quot;signature&quot;:&quot;ce5b51b7456420232e838995887cb95270f42abfd499f704e58d3a33e44ac9960a88ab613bec2e3c61aabffcce6f1080cef052e6164e6546952e6b13d61e9c79&quot;}},&quot;params&quot;:{},&quot;arguments&quot;:{&quot;deudmrx3i8&quot;:{&quot;kind&quot;:&quot;ARGUMENT&quot;,&quot;tempId&quot;:&quot;deudmrx3i8&quot;,&quot;value&quot;:&quot;0xf951707a4bc85ce4&quot;,&quot;asArgument&quot;:{&quot;type&quot;:&quot;Address&quot;,&quot;value&quot;:&quot;0xf951707a4bc85ce4&quot;},&quot;xform&quot;:{&quot;label&quot;:&quot;Address&quot;}},&quot;rtscux2d62&quot;:{&quot;kind&quot;:&quot;ARGUMENT&quot;,&quot;tempId&quot;:&quot;rtscux2d62&quot;,&quot;value&quot;:6640,&quot;asArgument&quot;:{&quot;type&quot;:&quot;UInt64&quot;,&quot;value&quot;:&quot;6640&quot;},&quot;xform&quot;:{&quot;label&quot;:&quot;UInt64&quot;}}},&quot;message&quot;:{&quot;cadence&quot;:&quot;\nimport ProjectR from 0xf951707a4bc85ce4\nimport NonFungibleToken from 0x631e88ae7f1d7c20\nimport FungibleToken from 0x9a0766d93b6608b7\nimport Rumble from 0xa5e9977792ad9c12\nimport BloxmithMarketplace from 0xf951707a4bc85ce4\n\ntransaction(account: Address, id: UInt64) {\n\n  prepare(acct: AuthAccount) {\n\n    let CollectionCheck = acct.getCapability&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;(/public/ProjectRCollection).check()\n    \n    if (!CollectionCheck) {\n        acct.save(&lt;- ProjectR.createEmptyCollection(), to: /storage/ProjectRCollection)\n        acct.link&lt;&amp;ProjectR.Collection{ProjectR.CollectionPublic, NonFungibleToken.CollectionPublic}&gt;(/public/ProjectRCollection, target: /storage/ProjectRCollection)\n        acct.link&lt;&amp;ProjectR.Collection&gt;(/private/ProjectRCollection, target: /storage/ProjectRCollection)\n        \n        let ProjectRCollection = acct.getCapability&lt;&amp;ProjectR.Collection&gt;(/private/ProjectRCollection)\n        let RumbleTokenVault = acct.getCapability&lt;&amp;Rumble.Vault{FungibleToken.Receiver}&gt;(/public/RumbleReceiver)\n        \n        acct.save(&lt;- BloxmithMarketplace.createSaleCollection(ProjectRCollection: ProjectRCollection, TokenVault: RumbleTokenVault), to: /storage/SaleCollection)\n        acct.link&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;(/public/SaleCollection, target: /storage/SaleCollection)\n\n        let saleCollection = getAccount(account).getCapability(/public/SaleCollection)\n                        .borrow&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;()\n                        ?? panic(\&quot;Could not borrow the user&apos;s SaleCollection\&quot;)\n\n        let recipientCollection = getAccount(acct.address).getCapability(/public/ProjectRCollection) \n                        .borrow&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;()\n                        ?? panic(\&quot;Can&apos;t get the User&apos;s collection.\&quot;)\n\n        let price = saleCollection.getPrice(id: UInt64(id))\n        let payment &lt;- acct.borrow&lt;&amp;Rumble.Vault&gt;(from: /storage/RumbleVault)!.withdraw(amount: price) as! @Rumble.Vault\n        saleCollection.purchase(id: UInt64(id), newOwner: acct.address, recipientCollection: recipientCollection, payment: &lt;- payment)\n\n    } else {\n\n        let saleCollection = getAccount(account).getCapability(/public/SaleCollection)\n                        .borrow&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;()\n                        ?? panic(\&quot;Could not borrow the user&apos;s SaleCollection\&quot;)\n        let recipientCollection = getAccount(acct.address).getCapability(/public/ProjectRCollection) \n                        .borrow&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;()\n                        ?? panic(\&quot;Can&apos;t get the User&apos;s collection.\&quot;)\n        let price = saleCollection.getPrice(id: UInt64(id))\n        let payment &lt;- acct.borrow&lt;&amp;Rumble.Vault&gt;(from: /storage/RumbleVault)!.withdraw(amount: price) as! @Rumble.Vault\n        saleCollection.purchase(id: UInt64(id), newOwner: acct.address, recipientCollection: recipientCollection, payment: &lt;- payment)\n  }\n}\n\n  execute {\n    log(\&quot;A user purchased an NFT\&quot;)\n  }\n}\n&quot;,&quot;refBlock&quot;:&quot;b05df0502608356f40a7d4993e1598f83dc7fb1378e5e8a7a9bbdaf1007f7d2b&quot;,&quot;computeLimit&quot;:999,&quot;proposer&quot;:null,&quot;payer&quot;:null,&quot;authorizations&quot;:[],&quot;params&quot;:[],&quot;arguments&quot;:[&quot;deudmrx3i8&quot;,&quot;rtscux2d62&quot;]},&quot;proposer&quot;:&quot;0xf086a545ce3c552d-466&quot;,&quot;authorizations&quot;:[&quot;0x219c841f936a343b-1&quot;],&quot;payer&quot;:[&quot;0xf086a545ce3c552d-466&quot;],&quot;events&quot;:{&quot;eventType&quot;:null,&quot;start&quot;:null,&quot;end&quot;:null,&quot;blockIds&quot;:[]},&quot;transaction&quot;:{&quot;id&quot;:null},&quot;block&quot;:{&quot;id&quot;:null,&quot;height&quot;:null,&quot;isSealed&quot;:null},&quot;account&quot;:{&quot;addr&quot;:null},&quot;collection&quot;:{&quot;id&quot;:null}},&quot;voucher&quot;:{&quot;cadence&quot;:&quot;\nimport ProjectR from 0xf951707a4bc85ce4\nimport NonFungibleToken from 0x631e88ae7f1d7c20\nimport FungibleToken from 0x9a0766d93b6608b7\nimport Rumble from 0xa5e9977792ad9c12\nimport BloxmithMarketplace from 0xf951707a4bc85ce4\n\ntransaction(account: Address, id: UInt64) {\n\n  prepare(acct: AuthAccount) {\n\n    let CollectionCheck = acct.getCapability&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;(/public/ProjectRCollection).check()\n    \n    if (!CollectionCheck) {\n        acct.save(&lt;- ProjectR.createEmptyCollection(), to: /storage/ProjectRCollection)\n        acct.link&lt;&amp;ProjectR.Collection{ProjectR.CollectionPublic, NonFungibleToken.CollectionPublic}&gt;(/public/ProjectRCollection, target: /storage/ProjectRCollection)\n        acct.link&lt;&amp;ProjectR.Collection&gt;(/private/ProjectRCollection, target: /storage/ProjectRCollection)\n        \n        let ProjectRCollection = acct.getCapability&lt;&amp;ProjectR.Collection&gt;(/private/ProjectRCollection)\n        let RumbleTokenVault = acct.getCapability&lt;&amp;Rumble.Vault{FungibleToken.Receiver}&gt;(/public/RumbleReceiver)\n        \n        acct.save(&lt;- BloxmithMarketplace.createSaleCollection(ProjectRCollection: ProjectRCollection, TokenVault: RumbleTokenVault), to: /storage/SaleCollection)\n        acct.link&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;(/public/SaleCollection, target: /storage/SaleCollection)\n\n        let saleCollection = getAccount(account).getCapability(/public/SaleCollection)\n                        .borrow&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;()\n                        ?? panic(\&quot;Could not borrow the user&apos;s SaleCollection\&quot;)\n\n        let recipientCollection = getAccount(acct.address).getCapability(/public/ProjectRCollection) \n                        .borrow&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;()\n                        ?? panic(\&quot;Can&apos;t get the User&apos;s collection.\&quot;)\n\n        let price = saleCollection.getPrice(id: UInt64(id))\n        let payment &lt;- acct.borrow&lt;&amp;Rumble.Vault&gt;(from: /storage/RumbleVault)!.withdraw(amount: price) as! @Rumble.Vault\n        saleCollection.purchase(id: UInt64(id), newOwner: acct.address, recipientCollection: recipientCollection, payment: &lt;- payment)\n\n    } else {\n\n        let saleCollection = getAccount(account).getCapability(/public/SaleCollection)\n                        .borrow&lt;&amp;BloxmithMarketplace.SaleCollection{BloxmithMarketplace.SaleCollectionPublic}&gt;()\n                        ?? panic(\&quot;Could not borrow the user&apos;s SaleCollection\&quot;)\n        let recipientCollection = getAccount(acct.address).getCapability(/public/ProjectRCollection) \n                        .borrow&lt;&amp;ProjectR.Collection{NonFungibleToken.CollectionPublic}&gt;()\n                        ?? panic(\&quot;Can&apos;t get the User&apos;s collection.\&quot;)\n        let price = saleCollection.getPrice(id: UInt64(id))\n        let payment &lt;- acct.borrow&lt;&amp;Rumble.Vault&gt;(from: /storage/RumbleVault)!.withdraw(amount: price) as! @Rumble.Vault\n        saleCollection.purchase(id: UInt64(id), newOwner: acct.address, recipientCollection: recipientCollection, payment: &lt;- payment)\n  }\n}\n\n  execute {\n    log(\&quot;A user purchased an NFT\&quot;)\n  }\n}\n&quot;,&quot;refBlock&quot;:&quot;b05df0502608356f40a7d4993e1598f83dc7fb1378e5e8a7a9bbdaf1007f7d2b&quot;,&quot;computeLimit&quot;:999,&quot;arguments&quot;:[{&quot;type&quot;:&quot;Address&quot;,&quot;value&quot;:&quot;0xf951707a4bc85ce4&quot;},{&quot;type&quot;:&quot;UInt64&quot;,&quot;value&quot;:&quot;6640&quot;}],&quot;proposalKey&quot;:{&quot;address&quot;:&quot;0xf086a545ce3c552d&quot;,&quot;keyId&quot;:466,&quot;sequenceNum&quot;:512},&quot;payer&quot;:&quot;0xf086a545ce3c552d&quot;,&quot;authorizers&quot;:[&quot;0x219c841f936a343b&quot;],&quot;payloadSigs&quot;:[{&quot;address&quot;:&quot;0x219c841f936a343b&quot;,&quot;keyId&quot;:1,&quot;sig&quot;:&quot;ce5b51b7456420232e838995887cb95270f42abfd499f704e58d3a33e44ac9960a88ab613bec2e3c61aabffcce6f1080cef052e6164e6546952e6b13d61e9c79&quot;}],&quot;envelopeSigs&quot;:[{&quot;address&quot;:&quot;0xf086a545ce3c552d&quot;,&quot;keyId&quot;:466}]}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">flow-wallet-dev.blocto.app</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/flow/payer?l6n=${scheme}%3A%2F%2Fqa.bloxmith.com&amp;sessionId=d1JRA027C-PsI-Geu3Hf&amp;payerId=8c173fd2-6539-4a03-8d59-d48c6c84a9be</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/transactions-591" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;script&quot;:&quot;CmltcG9ydCBQcm9qZWN0UiBmcm9tIDB4Zjk1MTcwN2E0YmM4NWNlNAppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwppbXBvcnQgUnVtYmxlIGZyb20gMHhhNWU5OTc3NzkyYWQ5YzEyCmltcG9ydCBCbG94bWl0aE1hcmtldHBsYWNlIGZyb20gMHhmOTUxNzA3YTRiYzg1Y2U0Cgp0cmFuc2FjdGlvbihhY2NvdW50OiBBZGRyZXNzLCBpZDogVUludDY0KSB7CgogIHByZXBhcmUoYWNjdDogQXV0aEFjY291bnQpIHsKCiAgICBsZXQgQ29sbGVjdGlvbkNoZWNrID0gYWNjdC5nZXRDYXBhYmlsaXR5PCZQcm9qZWN0Ui5Db2xsZWN0aW9ue05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KC9wdWJsaWMvUHJvamVjdFJDb2xsZWN0aW9uKS5jaGVjaygpCiAgICAKICAgIGlmICghQ29sbGVjdGlvbkNoZWNrKSB7CiAgICAgICAgYWNjdC5zYXZlKDwtIFByb2plY3RSLmNyZWF0ZUVtcHR5Q29sbGVjdGlvbigpLCB0bzogL3N0b3JhZ2UvUHJvamVjdFJDb2xsZWN0aW9uKQogICAgICAgIGFjY3QubGluazwmUHJvamVjdFIuQ29sbGVjdGlvbntQcm9qZWN0Ui5Db2xsZWN0aW9uUHVibGljLCBOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9PigvcHVibGljL1Byb2plY3RSQ29sbGVjdGlvbiwgdGFyZ2V0OiAvc3RvcmFnZS9Qcm9qZWN0UkNvbGxlY3Rpb24pCiAgICAgICAgYWNjdC5saW5rPCZQcm9qZWN0Ui5Db2xsZWN0aW9uPigvcHJpdmF0ZS9Qcm9qZWN0UkNvbGxlY3Rpb24sIHRhcmdldDogL3N0b3JhZ2UvUHJvamVjdFJDb2xsZWN0aW9uKQogICAgICAgIAogICAgICAgIGxldCBQcm9qZWN0UkNvbGxlY3Rpb24gPSBhY2N0LmdldENhcGFiaWxpdHk8JlByb2plY3RSLkNvbGxlY3Rpb24+KC9wcml2YXRlL1Byb2plY3RSQ29sbGVjdGlvbikKICAgICAgICBsZXQgUnVtYmxlVG9rZW5WYXVsdCA9IGFjY3QuZ2V0Q2FwYWJpbGl0eTwmUnVtYmxlLlZhdWx0e0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PigvcHVibGljL1J1bWJsZVJlY2VpdmVyKQogICAgICAgIAogICAgICAgIGFjY3Quc2F2ZSg8LSBCbG94bWl0aE1hcmtldHBsYWNlLmNyZWF0ZVNhbGVDb2xsZWN0aW9uKFByb2plY3RSQ29sbGVjdGlvbjogUHJvamVjdFJDb2xsZWN0aW9uLCBUb2tlblZhdWx0OiBSdW1ibGVUb2tlblZhdWx0KSwgdG86IC9zdG9yYWdlL1NhbGVDb2xsZWN0aW9uKQogICAgICAgIGFjY3QubGluazwmQmxveG1pdGhNYXJrZXRwbGFjZS5TYWxlQ29sbGVjdGlvbntCbG94bWl0aE1hcmtldHBsYWNlLlNhbGVDb2xsZWN0aW9uUHVibGljfT4oL3B1YmxpYy9TYWxlQ29sbGVjdGlvbiwgdGFyZ2V0OiAvc3RvcmFnZS9TYWxlQ29sbGVjdGlvbikKCiAgICAgICAgbGV0IHNhbGVDb2xsZWN0aW9uID0gZ2V0QWNjb3VudChhY2NvdW50KS5nZXRDYXBhYmlsaXR5KC9wdWJsaWMvU2FsZUNvbGxlY3Rpb24pCiAgICAgICAgICAgICAgICAgICAgICAgIC5ib3Jyb3c8JkJsb3htaXRoTWFya2V0cGxhY2UuU2FsZUNvbGxlY3Rpb257QmxveG1pdGhNYXJrZXRwbGFjZS5TYWxlQ29sbGVjdGlvblB1YmxpY30+KCkKICAgICAgICAgICAgICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgdGhlIHVzZXIncyBTYWxlQ29sbGVjdGlvbiIpCgogICAgICAgIGxldCByZWNpcGllbnRDb2xsZWN0aW9uID0gZ2V0QWNjb3VudChhY2N0LmFkZHJlc3MpLmdldENhcGFiaWxpdHkoL3B1YmxpYy9Qcm9qZWN0UkNvbGxlY3Rpb24pIAogICAgICAgICAgICAgICAgICAgICAgICAuYm9ycm93PCZQcm9qZWN0Ui5Db2xsZWN0aW9ue05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KCkKICAgICAgICAgICAgICAgICAgICAgICAgPz8gcGFuaWMoIkNhbid0IGdldCB0aGUgVXNlcidzIGNvbGxlY3Rpb24uIikKCiAgICAgICAgbGV0IHByaWNlID0gc2FsZUNvbGxlY3Rpb24uZ2V0UHJpY2UoaWQ6IFVJbnQ2NChpZCkpCiAgICAgICAgbGV0IHBheW1lbnQgPC0gYWNjdC5ib3Jyb3c8JlJ1bWJsZS5WYXVsdD4oZnJvbTogL3N0b3JhZ2UvUnVtYmxlVmF1bHQpIS53aXRoZHJhdyhhbW91bnQ6IHByaWNlKSBhcyEgQFJ1bWJsZS5WYXVsdAogICAgICAgIHNhbGVDb2xsZWN0aW9uLnB1cmNoYXNlKGlkOiBVSW50NjQoaWQpLCBuZXdPd25lcjogYWNjdC5hZGRyZXNzLCByZWNpcGllbnRDb2xsZWN0aW9uOiByZWNpcGllbnRDb2xsZWN0aW9uLCBwYXltZW50OiA8LSBwYXltZW50KQoKICAgIH0gZWxzZSB7CgogICAgICAgIGxldCBzYWxlQ29sbGVjdGlvbiA9IGdldEFjY291bnQoYWNjb3VudCkuZ2V0Q2FwYWJpbGl0eSgvcHVibGljL1NhbGVDb2xsZWN0aW9uKQogICAgICAgICAgICAgICAgICAgICAgICAuYm9ycm93PCZCbG94bWl0aE1hcmtldHBsYWNlLlNhbGVDb2xsZWN0aW9ue0Jsb3htaXRoTWFya2V0cGxhY2UuU2FsZUNvbGxlY3Rpb25QdWJsaWN9PigpCiAgICAgICAgICAgICAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHRoZSB1c2VyJ3MgU2FsZUNvbGxlY3Rpb24iKQogICAgICAgIGxldCByZWNpcGllbnRDb2xsZWN0aW9uID0gZ2V0QWNjb3VudChhY2N0LmFkZHJlc3MpLmdldENhcGFiaWxpdHkoL3B1YmxpYy9Qcm9qZWN0UkNvbGxlY3Rpb24pIAogICAgICAgICAgICAgICAgICAgICAgICAuYm9ycm93PCZQcm9qZWN0Ui5Db2xsZWN0aW9ue05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KCkKICAgICAgICAgICAgICAgICAgICAgICAgPz8gcGFuaWMoIkNhbid0IGdldCB0aGUgVXNlcidzIGNvbGxlY3Rpb24uIikKICAgICAgICBsZXQgcHJpY2UgPSBzYWxlQ29sbGVjdGlvbi5nZXRQcmljZShpZDogVUludDY0KGlkKSkKICAgICAgICBsZXQgcGF5bWVudCA8LSBhY2N0LmJvcnJvdzwmUnVtYmxlLlZhdWx0Pihmcm9tOiAvc3RvcmFnZS9SdW1ibGVWYXVsdCkhLndpdGhkcmF3KGFtb3VudDogcHJpY2UpIGFzISBAUnVtYmxlLlZhdWx0CiAgICAgICAgc2FsZUNvbGxlY3Rpb24ucHVyY2hhc2UoaWQ6IFVJbnQ2NChpZCksIG5ld093bmVyOiBhY2N0LmFkZHJlc3MsIHJlY2lwaWVudENvbGxlY3Rpb246IHJlY2lwaWVudENvbGxlY3Rpb24sIHBheW1lbnQ6IDwtIHBheW1lbnQpCiAgfQp9CgogIGV4ZWN1dGUgewogICAgbG9nKCJBIHVzZXIgcHVyY2hhc2VkIGFuIE5GVCIpCiAgfQp9Cg==&quot;,&quot;arguments&quot;:[&quot;eyJ0eXBlIjoiQWRkcmVzcyIsInZhbHVlIjoiMHhmOTUxNzA3YTRiYzg1Y2U0In0=&quot;,&quot;eyJ0eXBlIjoiVUludDY0IiwidmFsdWUiOiI2NjQwIn0=&quot;],&quot;reference_block_id&quot;:&quot;b05df0502608356f40a7d4993e1598f83dc7fb1378e5e8a7a9bbdaf1007f7d2b&quot;,&quot;gas_limit&quot;:&quot;999&quot;,&quot;payer&quot;:&quot;f086a545ce3c552d&quot;,&quot;proposal_key&quot;:{&quot;address&quot;:&quot;f086a545ce3c552d&quot;,&quot;key_index&quot;:&quot;466&quot;,&quot;sequence_number&quot;:&quot;512&quot;},&quot;authorizers&quot;:[&quot;219c841f936a343b&quot;],&quot;payload_signatures&quot;:[{&quot;address&quot;:&quot;219c841f936a343b&quot;,&quot;key_index&quot;:&quot;1&quot;,&quot;signature&quot;:&quot;zltRt0VkICMug4mViHy5UnD0Kr/UmfcE5Y06M+RKyZYKiKthO+wuPGGqv/zObxCAzvBS5hZOZUaVLmsT1h6ceQ==&quot;}],&quot;envelope_signatures&quot;:[{&quot;address&quot;:&quot;f086a545ce3c552d&quot;,&quot;key_index&quot;:&quot;466&quot;,&quot;signature&quot;:&quot;B9OrsJkS6ZSbAxxboMTytNfOQxZlrWqnXcw5XGD3W/+itcqXTU7FNvxiBRZR1scSI/iSiqc79mcWVWnlDO6thw==&quot;}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">rest-testnet.onflow.org</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/v1/transactions</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/postLogin/debitTokenProviderTxnId-592" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">nft-backend-qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/postLogin/debitTokenProviderTxnId</stringProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/postLogin/ListenDebitTokenStatus-593" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">nft-backend-qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/postLogin/ListenDebitTokenStatus</stringProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/postLogin/ListenDebitTokenStatus-597" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;TxnId&quot;:&quot;f88c6b954f6d1261ceb448271e49ac2515216c92d883ad16f0d6493d247cc2e8&quot;,&quot;nftId&quot;:&quot;6640&quot;,&quot;inventoryId&quot;:&quot;14&quot;,&quot;supplyType&quot;:&quot;NFT&quot;,&quot;userTxnId&quot;:&quot;10065&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">nft-backend-qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/postLogin/ListenDebitTokenStatus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/postLogin/debitTokenProviderTxnId-596" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;userTxnId&quot;:&quot;10065&quot;,&quot;providerTxnId&quot;:&quot;f88c6b954f6d1261ceb448271e49ac2515216c92d883ad16f0d6493d247cc2e8&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">nft-backend-qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/postLogin/debitTokenProviderTxnId</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/transaction_results/f88c6b954f6d1261ceb448271e49ac2515216c92d883ad16f0d6493d247cc2e8-594" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">rest-testnet.onflow.org</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/v1/transaction_results/f88c6b954f6d1261ceb448271e49ac2515216c92d883ad16f0d6493d247cc2e8</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/u/2/webchannel/events?VER=8&amp;SID=vUAY7aIOC2K3J4vzZhuDfg&amp;RID=48517&amp;AID=21&amp;zx=7afcy8squjj4&amp;t=1-595" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="count" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">count</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ofs" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ofs</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="req0_data" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">req0_data</stringProp>
                    <stringProp name="Argument.value">[null,[2,null,null,null,3,true,null,null,0],null,null,null,null,[]]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">chat.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/u/2/webchannel/events?VER=8&amp;SID=vUAY7aIOC2K3J4vzZhuDfg&amp;RID=48517&amp;AID=21&amp;zx=7afcy8squjj4&amp;t=1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/transaction_results/f88c6b954f6d1261ceb448271e49ac2515216c92d883ad16f0d6493d247cc2e8-600" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">rest-testnet.onflow.org</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/v1/transaction_results/f88c6b954f6d1261ceb448271e49ac2515216c92d883ad16f0d6493d247cc2e8</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/u/2/webchannel/events-543" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="VER" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">VER</stringProp>
                    <stringProp name="Argument.value">8</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="RID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">RID</stringProp>
                    <stringProp name="Argument.value">rpc</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="SID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">SID</stringProp>
                    <stringProp name="Argument.value">vUAY7aIOC2K3J4vzZhuDfg</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="AID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">AID</stringProp>
                    <stringProp name="Argument.value">21</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="CI" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">CI</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="TYPE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">TYPE</stringProp>
                    <stringProp name="Argument.value">xmlhttp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="zx" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">zx</stringProp>
                    <stringProp name="Argument.value">eya27vo86rg4</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">t</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">chat.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/u/2/webchannel/events</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/transaction_results/f88c6b954f6d1261ceb448271e49ac2515216c92d883ad16f0d6493d247cc2e8-602" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">rest-testnet.onflow.org</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/v1/transaction_results/f88c6b954f6d1261ceb448271e49ac2515216c92d883ad16f0d6493d247cc2e8</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/transaction_results/f88c6b954f6d1261ceb448271e49ac2515216c92d883ad16f0d6493d247cc2e8-603" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">rest-testnet.onflow.org</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/v1/transaction_results/f88c6b954f6d1261ceb448271e49ac2515216c92d883ad16f0d6493d247cc2e8</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/a-604" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">t</stringProp>
                    <stringProp name="Argument.value">96</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                    <stringProp name="Argument.value">push</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="d" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">d</stringProp>
                    <stringProp name="Argument.value">N4IgLgngDgpiBcIYDcYDswgDROWAcgIYC2ciaAZmAPpQCuATgMYAWhAzjACba5gAihMIQSgA7oQA2kmDQBGUwmiZkQAZgCsABgBMvdsLB12CACw4wDJe0JMwASwD2aavZ6IA7Ex1yKprjoAbEwAHCGmOlrBWgCMcoFapjAeAJymhB4xWhqB/hQpKSFMajERGilaaoEeFB5aHnIhPjBMGnJMgfpMDDDo1GgkqgD0UAyOXHR2QwDabgC6M5RgAJL8c/otDs4IIPgAYgAqAAT8soT2krzCDADmsrSEdzsAshBHAMKO0puEcjImAF8cG4diEAEoAaQAtBpYVCPB5AgAtXg3HYwSKRHKmUwxJilFIUQKELj4xpqQgaGIeQgwLT1fQIGLVDxNEJqAo4KBo+AxHAAdSRkOo7wAgs8AAqiEBiYhQBBaCySJgIaZzAEAoAA==</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="rn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">rn</stringProp>
                    <stringProp name="Argument.value">8</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="i" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">i</stringProp>
                    <stringProp name="Argument.value">1677829554</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sn</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="gc" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">gc</stringProp>
                    <stringProp name="Argument.value">e202056441c149f6adc1b83a517ae007</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="arp" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">arp</stringProp>
                    <stringProp name="Argument.value">N4Ig1g+gdiBcIG0AEAdEBGAbAZnQJgBYAGATiIFZsKSAOUvGgAQHMBbAQwEsAbAOgGMA9qzRIANKgw58xMpWp0SDURLRZcePAHZ85LQTyYtdLCsnr823fsPGiWFhx4DhaALogxIAFbQ4IAC1WAAcoAFMAdwBJACFPEE4/eCDQyNj4gBMIABcAZzgiLwyACwKvADc4dC9ffPhgJABfeM4M/xoAJQBpAFpyfp6tLUwA+LCcusKQACcJqqNjPBJ5L05cgHkAVQAZOGzpgFcwxqAAA==</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="tries" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tries</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="useIP" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">useIP</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="r" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">r</stringProp>
                    <stringProp name="Argument.value">1677829554602</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">eu1.clevertap-prod.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/a</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/post_login/getBalance-605" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="systemUserId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">systemUserId</stringProp>
                    <stringProp name="Argument.value">1631227125742678016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">api-bx-qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/post_login/getBalance</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/postLogin/player-nfts-608" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="userId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">userId</stringProp>
                    <stringProp name="Argument.value">1631227125742678016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="lang" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">lang</stringProp>
                    <stringProp name="Argument.value">en</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ownerAddress" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ownerAddress</stringProp>
                    <stringProp name="Argument.value">0x219c841f936a343b</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">nft-backend-qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/postLogin/player-nfts</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/scripts?block_height=sealed-606" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;script&quot;:&quot;CiAgICAgIGltcG9ydCBSdW1ibGUgZnJvbSAweGE1ZTk5Nzc3OTJhZDljMTIKICAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKICAgICAgcHViIGZ1biBtYWluKGFjY291bnQ6IEFkZHJlc3MpOiBVRml4NjQgewogICAgICAgICAgbGV0IFJlY2lwaWVudFZhdWx0ID0gZ2V0QWNjb3VudChhY2NvdW50KS5nZXRDYXBhYmlsaXR5KC9wdWJsaWMvUnVtYmxlUHVibGljKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmJvcnJvdzwmUnVtYmxlLlZhdWx0e0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IFJlY2lwaWVudCBWYXVsdCByZWZlcmVuY2UiKQogICAgICAgICAgcmV0dXJuIFJlY2lwaWVudFZhdWx0LmJhbGFuY2UKICAgICAgfQogICAgICA=&quot;,&quot;arguments&quot;:[&quot;eyJ0eXBlIjoiQWRkcmVzcyIsInZhbHVlIjoiMHgyMTljODQxZjkzNmEzNDNiIn0=&quot;]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">rest-testnet.onflow.org</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/v1/scripts?block_height=sealed</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/_next/image-613" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="url" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">url</stringProp>
                    <stringProp name="Argument.value">${scheme}://dtz22sdwncfa9.cloudfront.net/assets/img/mail.png</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="w" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">w</stringProp>
                    <stringProp name="Argument.value">32</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="q" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">q</stringProp>
                    <stringProp name="Argument.value">75</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/image</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/_next/image-611" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="url" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">url</stringProp>
                    <stringProp name="Argument.value">${scheme}://dtz22sdwncfa9.cloudfront.net/assets/img/transaction.png</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="w" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">w</stringProp>
                    <stringProp name="Argument.value">32</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="q" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">q</stringProp>
                    <stringProp name="Argument.value">75</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/image</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/domainreliability/upload-614" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;entries&quot;:[{&quot;failure_data&quot;:{&quot;custom_error&quot;:&quot;net::ERR_ABORTED&quot;},&quot;http_response_code&quot;:200,&quot;network_changed&quot;:false,&quot;protocol&quot;:&quot;HTTP&quot;,&quot;request_age_ms&quot;:62229,&quot;request_elapsed_ms&quot;:279,&quot;sample_rate&quot;:1.0,&quot;server_ip&quot;:&quot;&quot;,&quot;status&quot;:&quot;aborted&quot;,&quot;url&quot;:&quot;${scheme}://google.com/domainreliability/upload&quot;,&quot;was_proxied&quot;:true},{&quot;http_response_code&quot;:200,&quot;network_changed&quot;:false,&quot;protocol&quot;:&quot;HTTPS&quot;,&quot;request_age_ms&quot;:42536,&quot;request_elapsed_ms&quot;:395,&quot;sample_rate&quot;:0.05,&quot;server_ip&quot;:&quot;[::1]:8888&quot;,&quot;status&quot;:&quot;ok&quot;,&quot;url&quot;:&quot;${scheme}://chat.google.com/&quot;,&quot;was_proxied&quot;:true}],&quot;reporter&quot;:&quot;chrome&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/domainreliability/upload</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/_next/image-612" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="url" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">url</stringProp>
                    <stringProp name="Argument.value">${scheme}://dtz22sdwncfa9.cloudfront.net/assets/img/nft.png</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="w" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">w</stringProp>
                    <stringProp name="Argument.value">32</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="q" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">q</stringProp>
                    <stringProp name="Argument.value">75</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/image</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/u/2/_/DynamiteWebUi/idv/-615" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="rt" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">rt</stringProp>
                    <stringProp name="Argument.value">r</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="f_uid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">f_uid</stringProp>
                    <stringProp name="Argument.value">109700400422718325491</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">chat.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/u/2/_/DynamiteWebUi/idv/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/_next/image-610" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="url" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">url</stringProp>
                    <stringProp name="Argument.value">${scheme}://dtz22sdwncfa9.cloudfront.net/assets/img/profile.png</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="w" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">w</stringProp>
                    <stringProp name="Argument.value">32</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="q" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">q</stringProp>
                    <stringProp name="Argument.value">75</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/image</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/_next/image-609" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="url" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">url</stringProp>
                    <stringProp name="Argument.value">${scheme}://dtz22sdwncfa9.cloudfront.net/assets/img/Turkey.png</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="w" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">w</stringProp>
                    <stringProp name="Argument.value">96</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="q" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">q</stringProp>
                    <stringProp name="Argument.value">75</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">qa.bloxmith.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/image</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">D:\OneDrive\Desktop\JMeter\apache-jmeter-5.5\Report.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="false">
        <stringProp name="ProxyControlGui.port">8888</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list">
          <stringProp name="805311387">windowsupdate\.microsoft\.com.*</stringProp>
          <stringProp name="1179605444">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|eot|otf|ttf|mp4|woff|woff2)</stringProp>
          <stringProp name="110431874">.*msg\.yahoo\.com.*</stringProp>
          <stringProp name="-88591710">www\.download\.windowsupdate\.com.*</stringProp>
          <stringProp name="1323576868">toolbarqueries\.google\..*</stringProp>
          <stringProp name="1739087931">http?://self-repair\.mozilla\.org.*</stringProp>
          <stringProp name="1206954446">tiles.*\.mozilla\.com.*</stringProp>
          <stringProp name="-1424663473">.*detectportal\.firefox\.com.*</stringProp>
          <stringProp name="1779943373">us\.update\.toolbar\.yahoo\.com.*</stringProp>
          <stringProp name="-190610036">.*\.google\.com.*/safebrowsing/.*</stringProp>
          <stringProp name="-1899150273">api\.bing\.com.*</stringProp>
          <stringProp name="-958112859">toolbar\.google\.com.*</stringProp>
          <stringProp name="-192420923">.*yimg\.com.*</stringProp>
          <stringProp name="-576820688">toolbar\.msn\.com.*</stringProp>
          <stringProp name="305776760">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|eot|otf|ttf|mp4|woff|woff2)[\?;].*</stringProp>
          <stringProp name="-1435252351">toolbar\.avg\.com/.*</stringProp>
          <stringProp name="2118375536">www\.google-analytics\.com.*</stringProp>
          <stringProp name="-1279148329">pgq\.yahoo\.com.*</stringProp>
          <stringProp name="1815174768">safebrowsing.*\.google\.com.*</stringProp>
          <stringProp name="-1314416226">sqm\.microsoft\.com.*</stringProp>
          <stringProp name="587935979">g\.msn.*</stringProp>
          <stringProp name="1629558731">clients.*\.google.*</stringProp>
          <stringProp name="11072252">.*toolbar\.yahoo\.com.*</stringProp>
          <stringProp name="1726898318">geo\.yahoo\.com.*</stringProp>
        </collectionProp>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">false</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">4</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <boolProp name="ProxyControlGui.regex_match">true</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">false</boolProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name"></stringProp>
        <intProp name="ProxyControlGui.proxy_http_sampler_naming_mode">0</intProp>
        <stringProp name="ProxyControlGui.proxy_pause_http_sampler"></stringProp>
        <boolProp name="ProxyControlGui.detect_graphql_request">true</boolProp>
        <stringProp name="ProxyControlGui.default_encoding">UTF-8</stringProp>
      </ProxyControl>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>true</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>true</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">recording.xml</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="jp@gc - Ultimate Thread Group" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-1562088968">
            <stringProp name="48625">100</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="49">1</stringProp>
            <stringProp name="53">5</stringProp>
            <stringProp name="53">5</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="bloxmithLogin" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;token&quot;:&quot;eyJhbGciOiJSUzI1NiIsImtpZCI6ImQyNWY4ZGJjZjk3ZGM3ZWM0MDFmMDE3MWZiNmU2YmRhOWVkOWU3OTIiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJuYmYiOjE2Nzc4Mzg0MTcsImF1ZCI6IjEwNjY0NzI2OTk2MDUtbDdvdDBpYzlidmI5bDNlOTY3ZmNxdm45MGFsOGFiOG4uYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMDk3MDA0MDA0MjI3MTgzMjU0OTEiLCJoZCI6ImlwZWMub3JnLmluIiwiZW1haWwiOiIxODAzMDMxMDIyQGlwZWMub3JnLmluIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImF6cCI6IjEwNjY0NzI2OTk2MDUtbDdvdDBpYzlidmI5bDNlOTY3ZmNxdm45MGFsOGFiOG4uYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJuYW1lIjoiQXBvb3J2IEd1cHRhIiwicGljdHVyZSI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hL0FHTm15eGJBckw3ODBJZmw2NHA3Rnl4Q0V5SkVvXzZfZlJteEhnQ3dsaEFOPXM5Ni1jIiwiZ2l2ZW5fbmFtZSI6IkFwb29ydiIsImZhbWlseV9uYW1lIjoiR3VwdGEiLCJpYXQiOjE2Nzc4Mzg3MTcsImV4cCI6MTY3Nzg0MjMxNywianRpIjoiODI3NzM5OWZmYjk4YjE0MmIzZWRjZmMzNWI1YTI0MzcxOGQ4Y2E0NyJ9.KpavZLrNC9-eL1nmMRaDnfjEn4J0AfXu1X-4U3-FmDr6RhbA7d5QDzvShaS_mb3-4cdFIOn_BprKLOcIJ_aCE1Oe1-0emLYmXozvY7k0qgPSofMLderiQnciXSTlvyOfLJ9Qf8veoo5crCZK9f10aeB84D13ke9sIJxN_P54mhfXDMYOf7LQEEPEduvAQx7VfsSYR5qGg4Nyq1LoA_iWQY3c0bUXER2PWxafz2xo_EwFq9_ECJhhXMKMZ5ulxSBqnGKUfY3bkscyMzVwGVungaFm9dkdMsBOwvGZLeqKa0C6rGySOTXqcYg4IPoJUOcREcR-TK-gAnlkTaeIEixJNw&quot;,&quot;aliasName&quot;:&quot;www.bloxmith.com&quot;,&quot;device&quot;:&quot;PC_BROWSER&quot;,&quot;requestIp&quot;:&quot;127.0.0.0&quot;,&quot;loginType&quot;:&quot;google&quot;,&quot;userAgent&quot;:&quot;Agent&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">cam-backend-qa.bloxmith.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/preLogin/bloxmithLogin</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Created from cURL on 2023-03-03T15:49:16.092</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP HeaderManager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authority" elementType="Header">
                <stringProp name="Header.name">authority</stringProp>
                <stringProp name="Header.value">cam-backend-qa.bloxmith.com</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">accept-language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="clientcode" elementType="Header">
                <stringProp name="Header.name">clientcode</stringProp>
                <stringProp name="Header.value">CAM</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="origin" elementType="Header">
                <stringProp name="Header.name">origin</stringProp>
                <stringProp name="Header.value">https://qa.bloxmith.com</stringProp>
              </elementProp>
              <elementProp name="referer" elementType="Header">
                <stringProp name="Header.name">referer</stringProp>
                <stringProp name="Header.value">https://qa.bloxmith.com/</stringProp>
              </elementProp>
              <elementProp name="sec-fetch-dest" elementType="Header">
                <stringProp name="Header.name">sec-fetch-dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
              <elementProp name="sec-fetch-mode" elementType="Header">
                <stringProp name="Header.name">sec-fetch-mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="sec-fetch-site" elementType="Header">
                <stringProp name="Header.name">sec-fetch-site</stringProp>
                <stringProp name="Header.value">same-site</stringProp>
              </elementProp>
              <elementProp name="sec-gpc" elementType="Header">
                <stringProp name="Header.name">sec-gpc</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="user-agent" elementType="Header">
                <stringProp name="Header.name">user-agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Created from cURL on 2023-03-03T15:49:16.093</stringProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.errorCode</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
